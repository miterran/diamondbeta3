{"version":3,"sources":["../../../../src/routes/agent/ctrls/purchaseCredit.js"],"names":["purchaseCredit","req","res","body","credit","purchasePrice","price","newAgentDeposit","owner","superAgent","user","agent","_id","creditAmount","priceAmount","orderNumber","process","toUpperCase","save","newAgentTransaction","orderType","transactionType","resultAmount","currentStatus","findOneAndUpdate","json"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;;;2cAL6B;;;AAM7B;;;AAIA,IAAMA;AAAA,sDAAiB,iBAAOC,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAGfF,qBAHe,GAGEC,IAAIE,IAAJ,CAASC,MAHX;AAIfC,mBAJe,GAICJ,IAAIE,IAAJ,CAASG,KAJV;AAMjBC,qBANiB,GAMC,2BAAiB;AACtCC,cAAM;AACLC,oBAAaR,IAAIS,IAAJ,CAASD,UADjB;AAELE,eAAQV,IAAIS,IAAJ,CAASE;AAFZ,QADgC;AAKtCC,qBAAcb,eALwB;AAMtCc,oBAAaT,aANyB;AAOtCU,oBAAa,iBAAOC,OAAP,GAAiBC,WAAjB;AAPyB,OAAjB,CAND;AAAA;AAAA,aAefV,gBAAgBW,IAAhB,EAfe;;AAAA;AAiBjBC,yBAjBiB,GAiBK,+BAAqB;AAC9CX,cAAM;AACLC,oBAAaR,IAAIS,IAAJ,CAASD,UADjB;AAELE,eAAQV,IAAIS,IAAJ,CAASE;AAFZ,QADwC;AAK9CF,aAAMT,IAAIS,IAAJ,CAASE,GAL+B;AAM9CQ,kBAAW,SANmC;AAO9CC,wBAAiB,IAP6B;AAQ9CR,qBAAcb,eARgC;AAS9CsB,qBAAcrB,IAAIS,IAAJ,CAASa,aAAT,CAAuBnB,MAAvB,GAAgCJ,eATA;AAU9Ce,oBAAaR,gBAAgBQ;AAViB,OAArB,CAjBL;AAAA;AAAA,aA6BfI,oBAAoBD,IAApB,EA7Be;;AAAA;AAAA;AAAA,aA+BD,gBAAMM,gBAAN,CAAuB,EAAEZ,KAAKX,IAAIS,IAAJ,CAASE,GAAhB,EAAvB,EAA8C,EAAE,QAAQ,EAAE,wBAAwBZ,eAA1B,EAA0C,iCAAiCA,eAA3E,EAAV,EAA9C,CA/BC;;AAAA;AA+BfW,WA/Be;;;AAiCrBT,UAAIuB,IAAJ,CAASxB,IAAIS,IAAb;AAjCqB;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAjB;;AAAA;AAAA;AAAA;AAAA,GAAN;;kBAuCeV,c;;AAKf;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA","file":"purchaseCredit.js","sourcesContent":["import _ from 'lodash';\nimport uniqid from 'uniqid'; //uniqid.process().toUpperCase()\nimport moment from 'moment';\n\nimport AgentDeposit from '../../../models/AgentDeposit';\nimport AgentTransaction from '../../../models/AgentTransaction';\nimport Agent from '../../../models/Agent';\n//import updateAgentStatusAfterOrder from '../../../updateDB/utils/updateAgentStatusAfterOrder';\n\n\n\nconst purchaseCredit = async (req, res) => {\n\ttry{\n\n\t\tconst purchaseCredit = req.body.credit\n\t\tconst purchasePrice = req.body.price\n\n\t\tlet newAgentDeposit = new AgentDeposit({\n\t\t\towner:{\n\t\t\t\tsuperAgent : req.user.superAgent,\n\t\t\t\tagent : req.user._id\n\t\t\t},\n\t\t\tcreditAmount: purchaseCredit,\n\t\t\tpriceAmount: purchasePrice,\n\t\t\torderNumber: uniqid.process().toUpperCase()\n\t\t})\n\t\tawait newAgentDeposit.save()\n\n\t\tlet newAgentTransaction = new AgentTransaction({\n\t\t\towner:{\n\t\t\t\tsuperAgent : req.user.superAgent,\n\t\t\t\tagent : req.user._id,\n\t\t\t},\n\t\t\tuser: req.user._id,\n\t\t\torderType: 'Deposit',\n\t\t\ttransactionType: 'in',\n\t\t\tcreditAmount: purchaseCredit,\n\t\t\tresultAmount: req.user.currentStatus.credit + purchaseCredit,\n\t\t\torderNumber: newAgentDeposit.orderNumber\n\t\t})\n\t\tawait newAgentTransaction.save()\n\n\t\tconst agent = await Agent.findOneAndUpdate({ _id: req.user._id }, { '$inc': { 'currentStatus.credit': purchaseCredit, 'currentStatus.availableCredit': purchaseCredit }})\n\n\t\tres.json(req.user)\n\t}catch(err){\n\t\tthrow err\n\t}\n}\n\nexport default purchaseCredit;\n\n\n\n\n// import Agent from '../../models/Agent';\n// import Player from '../../models/Player'\n// import { OpenBet, HistoryBet } from '../../models/BetOrder';\n// import moment from 'moment'\n// import mongoose from 'mongoose'\n// import _ from 'lodash'\n\n// const createAgentTransaction = async (AgentId) => {\n\n// \ttry {\n\n// \t\tlet newAgentTransaction = new AgentTransaction({\n// \t\t\towner:{\n// \t\t\t\tsuperAgent : req.user.superAgent,\n// \t\t\t\tagent : req.user._id\n// \t\t\t},\n// \t\t\torderType: 'Deposit',\n// \t\t\ttransactionType: 'in',\n// \t\t\tcreditAmount: purchaseCredit,\n// \t\t\tpriceAmount: purchasePrice,\n// \t\t\tresultAmount: agent.currentStatus.credit,\n// \t\t\torderNumber: newAgentDeposit.orderNumber\n// \t\t})\n// \t\tawait newAgentTransaction.save()\n\t\t\n// \t}catch(err){\n// \t\tthrow err\n// \t}\n// }\n\n// export default createAgentTransaction\n\n"]}