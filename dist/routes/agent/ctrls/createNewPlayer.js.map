{"version":3,"sources":["../../../../src/routes/agent/ctrls/createNewPlayer.js"],"names":["createNewPlayer","req","res","console","log","user","body","minRisk","maxWager","maxParlay","maxWin","weeklyStartCredit","username","password","passcode","findOne","existedPlayer","existedAgent","existedSuperAgent","isEmpty","status","amountGap","newPlayer","account","defaultSetting","superAgent","agent","_id","save","newPlayerInfo","findOneAndUpdate","$push","players","json","id"],"mappings":"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","file":"createNewPlayer.js","sourcesContent":["import moment from 'moment'\nimport Player from '../../../models/Player';\nimport Agent from '../../../models/Agent';\nimport SuperAgent from '../../../models/SuperAgent';\nimport _ from 'lodash'\nimport updatePlayerStatusAfterOrder from '../../../updateDB/updateUser/updatePlayerStatusAfterOrder';\n\nconst createNewPlayer = async (req, res) => {\n\ttry{\n\n\t\tconsole.log(req.user)\n\n\t\tconst { minRisk, maxWager, maxParlay, maxWin, weeklyStartCredit, username, password, passcode } = req.body\n\n\t\tconst existedPlayer = await Player.findOne({'account.username': username}, '_id')\n\t\tconst existedAgent = await Agent.findOne({'account.username': username}, '_id')\n\t\tconst existedSuperAgent = await existedSuperAgent.findOne({'account.username': username}, '_id')\n\n\t\tif(!_.isEmpty(existedPlayer) && !_.isEmpty(existedAgent) && !_.isEmpty(existedSuperAgent)) res.status(404)\n\n\n\t\tlet amountGap = 10\n\t\tswitch(true){\n\t\t\tcase maxWager <= 500:\n//\t\t\tcase minRisk < 50:\n\t\t\t\tamountGap = 10\n\t\t\t\tbreak;\n\t\t\tcase maxWager > 500 && maxWager <= 1000:\n//\t\t\tcase minRisk >= 50 && minRisk < 100:\n\t\t\t\tamountGap = 20\n\t\t\t\tbreak;\n\t\t\tcase maxWager > 1000 && maxWager <= 3000:\n//\t\t\tcase minRisk >= 100 && minRisk < 300:\n\t\t\t\tamountGap = 50\n\t\t\t\tbreak;\n\t\t\tcase maxWager > 3000:\n//\t\t\tcase minRisk >= 300:\n\t\t\t\tamountGap = 100\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\treturn\n\t\t}\n\n\n\t\tlet newPlayer = new Player({\n\t\t\taccount:{\n\t\t\t\tusername: username,\n\t\t\t\tpassword: password,\n\t\t\t\tpasscode: passcode\n\t\t\t},\n\t\t\tdefaultSetting: {\n\t\t\t\tweeklyStartCredit: weeklyStartCredit,\n\t\t\t\tminRisk: minRisk,\n\t\t\t\tmaxWager: maxWager,\n\t\t\t\tmaxWin: maxWin,\n\t\t\t\tmaxParlay: maxParlay,\n\t\t\t\tamountGap: amountGap,\n\t\t\t},\n\t\t\tsuperAgent: req.user.superAgent,\n\t\t\tagent: req.user._id\n\t\t})\n\n\t\tconst newPlayerInfo = await newPlayer.save()\n\t\tawait updatePlayerStatusAfterOrder(newPlayerInfo._id)\n\t\tawait Agent.findOneAndUpdate({ _id: req.user._id}, {$push: { players: newPlayerInfo._id }})\n\t\tawait SuperAgent.findOneAndUpdate({ _id: req.user.superAgent }, { $push: { players: newPlayerInfo._id } })\n\n\t\tres.json({ id: newPlayerInfo._id, username: newPlayerInfo.account.username })\n\n\t}catch(err){\n\t\tthrow err\n\t}\n}\n\nexport default createNewPlayer;\n\n\n\n\n\n\n// import mongoose from 'mongoose'\n// const Schema = mongoose.Schema\n\n// const PlayerSchema = mongoose.Schema({\n// \taccount: {\n// \t\trole: { type: String, default: 'player', required: true },\n// \t\tusername: { type: String, required: true },\n// \t\tpassword: { type: String, default: '1234', required: true },\n// \t\tpasscode: { type: String, default: '4321', required: true },\n// \t\temail: { type: String },\n// \t\tactivate: { type: Boolean, default: true, required: true },\n// \t},\n// \tdefaultSetting: {\n// \t\tweeklyStartCredit: { type: Number, default: 10000, required: true },\n// \t\tminRisk: { type: Number, default: 100, required: true },\n// \t\tmaxWager: { type: Number, default: 5000, required: true },\n// \t\tmaxWin: { type: Number, default: 10000, required: true },\n// \t\tmaxParlay: { type: Number, default: 7, required: true },\n// \t\tamountGap: { type: Number, default: 50, required: true }\n// \t},\n// \tcurrentStatus: {\n// \t\tcreditPending: { type: Number, default: 0 },\n// \t\tcurrentBalance: { type: Number, default: 0 },\n// \t\tavailableCredit: { type: Number, default: 0 }\n// \t},\n// \topenBetStatus: {\n// \t\tstraightBet: { type: Number, default: 0 },\n// \t\tparlayBet: { type: Number, default: 0 },\n// \t\tteaserBet: { type: Number, default: 0 },\n// \t\treverseBet: { type: Number, default: 0 },\n// \t\ttotalBets: { type: Number, default: 0 },\n// \t\ttotalRisk: { type: Number, default: 0 },\n// \t\ttotalWin: { type: Number, default: 0 }\n// \t},\n// \tsuperAgent: { type: Schema.Types.ObjectId, ref: 'SuperAgent' },\n// \tagent: { type: Schema.Types.ObjectId, ref: 'Agent' },\n// \tcreatedAt: { type: Date, default: Date.now, required: true }\n// })\n\n// const Player = mongoose.model('Player', PlayerSchema)\n\n// export default Player\n"]}