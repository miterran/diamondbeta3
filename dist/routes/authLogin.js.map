{"version":3,"sources":["../../src/routes/authLogin.js"],"names":["router","Router","post","req","res","body","username","password","findOne","$regex","RegExp","authPlayer","isEmpty","toLowerCase","account","token","sign","id","_id","role","jwtSecret","status","send","authAgent","authSuperAgent"],"mappings":"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","file":"authLogin.js","sourcesContent":["import config from '../config';\nimport moment from 'moment';\nimport _ from 'lodash';\nimport jwt from 'jsonwebtoken';\n\nimport Player from '../models/Player';\nimport Agent from '../models/Agent';\nimport SuperAgent from '../models/SuperAgent';\n\nimport express from 'express';\nconst router = express.Router();\n\nrouter.post('/login', async (req, res) => {\n\n\ttry{\n\t\tconst { username, password } = req.body\n\t\tconst authPlayer = await Player.findOne({ 'account.username': { $regex: new RegExp('^' + username, 'i')}}, 'account')\n\t\tif(!_.isEmpty(authPlayer)){\n\t\t\tif(password.toLowerCase() === authPlayer.account.password.toLowerCase()){\n\t\t\t\tconst token = jwt.sign({\n\t\t\t\t\tid: authPlayer._id,\t\t\t\t\n\t\t\t\t\trole: authPlayer.account.role,\n\t\t\t\t\tusername: authPlayer.account.username\n\t\t\t\t}, config.jwtSecret);\n\t\t\t\treturn res.status(200).send(token)\n\t\t\t}else{\n\t\t\t\treturn res.status(404).send('password not correct')\n\t\t\t}\n\t\t}\n\n\t\tconst authAgent = await Agent.findOne({ 'account.username': { $regex: new RegExp('^' + username, 'i') }}, 'account')\n\t\tif(!_.isEmpty(authAgent)){\n\t\t\tif(password.toLowerCase() === authAgent.account.password.toLowerCase()){\n\t\t\t\tconst token = jwt.sign({\n\t\t\t\t\tid: authAgent._id,\t\t\t\t\n\t\t\t\t\trole: authAgent.account.role,\n\t\t\t\t\tusername: authAgent.account.username\n\t\t\t\t}, config.jwtSecret);\n\t\t\t\treturn res.status(200).send(token)\n\t\t\t}else{\n\t\t\t\treturn res.status(404).send('password not correct')\n\t\t\t}\n\t\t}\n\n\t\tconst authSuperAgent = await SuperAgent.findOne({ 'account.username': { $regex: new RegExp('^' + username, 'i') }}, 'account')\n\t\tif(!_.isEmpty(authSuperAgent)){\n\t\t\tif(password.toLowerCase() === authSuperAgent.account.password.toLowerCase()){\n\t\t\t\tconst token = jwt.sign({\n\t\t\t\t\tid: authSuperAgent._id,\t\t\t\t\n\t\t\t\t\trole: authSuperAgent.account.role,\n\t\t\t\t\tusername: authSuperAgent.account.username\n\t\t\t\t}, config.jwtSecret);\n\t\t\t\treturn res.status(200).send(token)\n\t\t\t}else{\n\t\t\t\treturn res.status(404).send('password not correct')\n\t\t\t}\n\t\t}\n\n\t\treturn res.status(404).send('user not found')\n\t}catch(err){\n\t\tthrow err\n\t}\n\n})\n\nexport default router;\n\n\n\n\n\n"]}