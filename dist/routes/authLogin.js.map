{"version":3,"sources":["../../src/routes/authLogin.js"],"names":["router","Router","post","req","res","body","username","password","findOne","$regex","RegExp","authPlayer","isEmpty","toLowerCase","token","sign","id","_id","role","account","jwtSecret","status","send"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;AAEA;;;;;;;;AACA,IAAMA,SAAS,kBAAQC,MAAR,EAAf;;AAEAD,OAAOE,IAAP,CAAY,QAAZ;AAAA,sDAAsB,iBAAOC,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEUD,IAAIE,IAFd,EAEbC,QAFa,aAEbA,QAFa,EAEHC,QAFG,aAEHA,QAFG;AAAA;AAAA,aAGI,iBAAOC,OAAP,CAAe,EAAE,oBAAoB,EAAEC,QAAQ,IAAIC,MAAJ,CAAW,MAAMJ,QAAjB,EAA2B,GAA3B,CAAV,EAAtB,EAAf,CAHJ;;AAAA;AAGfK,gBAHe;;AAAA,UAIjB,iBAAEC,OAAF,CAAUD,UAAV,CAJiB;AAAA;AAAA;AAAA;;AAAA,YAKjBJ,SAASM,WAAT,OAA2BN,SAASM,WAAT,EALV;AAAA;AAAA;AAAA;;AAMbC,WANa,GAML,uBAAIC,IAAJ,CAAS;AACtBC,WAAIL,WAAWM,GADO;AAEtBC,aAAMP,WAAWQ,OAAX,CAAmBD,IAFH;AAGtBZ,iBAAUK,WAAWQ,OAAX,CAAmBb;AAHP,OAAT,EAIX,iBAAOc,SAJI,CANK;AAAA,uCAWZhB,IAAIiB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBR,KAArB,CAXY;;AAAA;AAAA,uCAaZV,IAAIiB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,sBAArB,CAbY;;AAAA;AAAA,uCAgBdlB,IAAIiB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,gBAArB,CAhBc;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAtB;;AAAA;AAAA;AAAA;AAAA;;kBAoBetB,M","file":"authLogin.js","sourcesContent":["import config from '../config';\nimport moment from 'moment';\nimport _ from 'lodash';\nimport jwt from 'jsonwebtoken';\n\nimport Player from '../models/Player';\nimport Agent from '../models/Agent';\nimport SuperAgent from '../models/SuperAgent';\n\nimport express from 'express';\nconst router = express.Router();\n\nrouter.post('/login', async (req, res) => {\n\n\tconst { username, password } = req.body\n\tconst authPlayer = await Player.findOne({ 'account.username': { $regex: new RegExp('^' + username, 'i') }})\n\tif(!_.isEmpty(authPlayer)){\n\t\tif(password.toLowerCase() === password.toLowerCase()){\n\t\t\tconst token = jwt.sign({\n\t\t\t\tid: authPlayer._id,\t\t\t\t\n\t\t\t\trole: authPlayer.account.role,\n\t\t\t\tusername: authPlayer.account.username\n\t\t\t}, config.jwtSecret);\n\t\t\treturn res.status(200).send(token)\n\t\t}else{\n\t\t\treturn res.status(404).send('password not correct')\n\t\t}\n\t}\n\treturn res.status(404).send('user not found')\n\n})\n\nexport default router;\n\n\n\n\n\n"]}