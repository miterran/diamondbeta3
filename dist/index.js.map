{"version":3,"sources":["../src/index.js"],"names":["use","connect","mongoURL","useMongoClient","Promise","app","server","createServer","json","urlencoded","extended","initialize","static","resolve","__dirname","scheduleJob","authenticate","session","get","request","response","sendFile","listen","process","env","PORT","port","console","log","address"],"mappings":";;;;;;AAAA;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;AAEA;;;;AACA;;;;AAGA;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;AAGA;;;;AACA;;;;;;;;AAXA,mBAASA,GAAT;;AAcA,mBAASC,OAAT,CAAiB,iBAAOC,QAAxB,EAAkC,EAAEC,gBAAgB,IAAlB,EAAlC;AACA,mBAASC,OAAT;;AAIA,IAAMC,MAAM,wBAAZ;AACAA,IAAIC,MAAJ,GAAa,eAAKC,YAAL,CAAkBF,GAAlB,CAAb;;AAEAA,IAAIL,GAAJ,CAAQ,sBAAO,KAAP,CAAR;;AAEAK,IAAIL,GAAJ,CAAQ,qBAAR;AACAK,IAAIL,GAAJ,CAAQ,uBAAR;AACAK,IAAIL,GAAJ,CAAQ,4BAAR;AACAK,IAAIL,GAAJ,CAAQ,+BAAR;;AAEAK,IAAIL,GAAJ,CAAQ,qBAAWQ,IAAX,EAAR;AACAH,IAAIL,GAAJ,CAAQ,qBAAWS,UAAX,CAAsB,EAAEC,UAAU,IAAZ,EAAtB,CAAR;;AAEAL,IAAIL,GAAJ,CAAQ,mBAASW,UAAT,EAAR;;AAEAN,IAAIL,GAAJ,CAAQ,kBAAQY,MAAR,CAAe,eAAKC,OAAL,CAAaC,SAAb,EAAwB,iBAAxB,CAAf,CAAR;;AAEA;AACA,uBAASC,WAAT,CAAqB,cAArB,4CAAqC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAC9B,gCAD8B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAArC;;AAKAV,IAAIL,GAAJ,CAAQ,MAAR;AACA;;AAEAK,IAAIL,GAAJ,CAAQ,MAAR,EAAgB,mBAASgB,YAAT,CAAsB,KAAtB,EAA6B,EAACC,SAAS,KAAV,EAA7B,CAAhB;;AAEAZ,IAAIL,GAAJ,CAAQ,aAAR;AACAK,IAAIL,GAAJ,CAAQ,YAAR;AACAK,IAAIL,GAAJ,CAAQ,kBAAR;;AAEAK,IAAIa,GAAJ,CAAQ,GAAR,EAAa,UAACC,OAAD,EAAUC,QAAV;AAAA,QAAuBA,SAASC,QAAT,CAAkB,eAAKR,OAAL,CAAaC,SAAb,EAAwB,iBAAxB,EAA2C,YAA3C,CAAlB,CAAvB;AAAA,CAAb;;AAEAT,IAAIC,MAAJ,CAAWgB,MAAX,CAAkBC,QAAQC,GAAR,CAAYC,IAAZ,IAAoB,iBAAOC,IAA7C,EAAmD;AAAA,QAAMC,QAAQC,GAAR,sBAA+BvB,IAAIC,MAAJ,CAAWuB,OAAX,GAAqBH,IAApD,CAAN;AAAA,CAAnD;;kBAEerB,G","file":"index.js","sourcesContent":["import 'babel-polyfill'\nimport path from 'path'\nimport http from 'http'\nimport express from 'express'\n\nimport _ from 'lodash';\nimport cors from 'cors'\nimport morgan from 'morgan'\nimport bodyParser from 'body-parser'\nimport compress from 'compression'\nimport config from './config'\nimport helmet from 'helmet'\nimport methodOverride from 'method-override'\nimport schedule from 'node-schedule';\n\nimport resetUserStatus from './schedule/resetUserStatus'\n\nimport passport from \"passport\";\nimport jwtStrategy from './middleware/jwtStrategy';\npassport.use(jwtStrategy)\n\nimport playerRoute from './routes/player'\nimport agentRoute from './routes/agent'\nimport superAgent from './routes/superAgent'\n\nimport createAccount from './routes/createAccount';\nimport authLogin from './routes/authLogin'\n\n\nimport mongoose from 'mongoose'\nimport bluebird from 'bluebird'\n\n\nmongoose.connect(config.mongoURL, { useMongoClient: true });\nmongoose.Promise = bluebird\n\n\n\nconst app = express()\napp.server = http.createServer(app)\n\napp.use(morgan('dev'))\n\napp.use(cors())\napp.use(helmet())\napp.use(compress())\napp.use(methodOverride())\n\napp.use(bodyParser.json())\napp.use(bodyParser.urlencoded({ extended: true }))\n\napp.use(passport.initialize());\n\napp.use(express.static(path.resolve(__dirname, '../client/build')))\n\nresetUserStatus()\nschedule.scheduleJob('* * 24 * * 1', async () => {\n\tawait resetUserStatus()\n});\n\n\napp.use('/api', authLogin)\n//app.use('/test', createAccount);\n\napp.use('/api', passport.authenticate('jwt', {session: false}))\n\napp.use('/api/player', playerRoute)\napp.use('/api/agent',  agentRoute)\napp.use('/api/super-agent', superAgent)\n\napp.get('*', (request, response) => response.sendFile(path.resolve(__dirname, '../client/build', 'index.html')))\n\napp.server.listen(process.env.PORT || config.port, () => console.log(`Started on port ${app.server.address().port}`))\n\nexport default app\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"]}