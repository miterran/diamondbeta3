{"version":3,"sources":["../../src/models/EventOdd.js"],"names":["Schema","EventOddSchema","uniqueId","type","String","singlePickId","radioPickId","source","provider","bookmaker","id","lastUpdated","Date","sport","enum","required","oddType","league","region","details","matchTime","cutOffTime","team","home","homeROT","homePitcher","away","awayROT","awayPitcher","odds","moneyLineHome","Number","moneyLineAway","pointSpreadHome","pointSpreadAway","pointSpreadHomeLine","pointSpreadAwayLine","totalNumber","overLine","underLine","drawLine","betDetail","oddLine","oddPoint","oddTarget","betType","score","homeScore","default","awayScore","status","note","updatedAt","expireAt","index","expireAfterSeconds","Result","model","EventOdd"],"mappings":";;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;AACA,IAAMA,SAAS,mBAASA,MAAxB;;AAEO,IAAMC,0CAAiB,IAAID,MAAJ,CAAW;AACxCE,WAAU,EAAEC,MAAMC,MAAR,EAD8B;AAExC;AACA;AACAC,eAAc,EAAEF,MAAMC,MAAR,EAJ0B;AAKxCE,cAAa,EAAEH,MAAMC,MAAR,EAL2B;AAMxCG,SAAQ;AACPC,YAAU,EAAEL,MAAMC,MAAR,EADH;AAEPK,aAAW,EAAEN,MAAMC,MAAR,EAFJ;AAGPM,MAAI,EAAEP,MAAMC,MAAR,EAHG;AAIPO,eAAa,EAAER,MAAMS,IAAR;AAJN,EANgC;AAYxCC,QAAO,EAAEV,MAAMC,MAAR,EAAgBU,yBAAhB,EAAiCC,UAAU,IAA3C,EAZiC;AAaxCC,UAAS,EAAEb,MAAMC,MAAR,EAAgBU,2BAAhB,EAAmCC,UAAU,IAA7C,EAb+B;AAcxCE,SAAQ,EAAEd,MAAMC,MAAR,EAdgC;AAexCc,SAAQ,EAAEf,MAAMC,MAAR,EAfgC;AAgBxCe,UAAS,EAAEhB,MAAMC,MAAR,EAhB+B;AAiBxCgB,YAAW,EAAEjB,MAAMS,IAAR,EAAcG,UAAU,IAAxB,EAjB6B;AAkBxCM,aAAY,EAAElB,MAAMS,IAAR,EAlB4B;AAmBxCU,OAAM;AACLC,QAAM,EAAEpB,MAAMC,MAAR,EAAgBW,UAAU,IAA1B,EADD;AAELS,WAAS,EAAErB,MAAMC,MAAR,EAFJ;AAGLqB,eAAa,EAAEtB,MAAMC,MAAR,EAHR;AAILsB,QAAM,EAAEvB,MAAMC,MAAR,EAAgBW,UAAU,IAA1B,EAJD;AAKLY,WAAS,EAAExB,MAAMC,MAAR,EALJ;AAMLwB,eAAa,EAAEzB,MAAMC,MAAR;AANR,EAnBkC;AA2BxCyB,OAAM;AACLC,iBAAe,EAAE3B,MAAM4B,MAAR,EADV;AAELC,iBAAe,EAAE7B,MAAM4B,MAAR,EAFV;AAGLE,mBAAiB,EAAE9B,MAAM4B,MAAR,EAHZ;AAILG,mBAAiB,EAAE/B,MAAM4B,MAAR,EAJZ;AAKLI,uBAAqB,EAAEhC,MAAM4B,MAAR,EALhB;AAMLK,uBAAqB,EAAEjC,MAAM4B,MAAR,EANhB;AAOLM,eAAa,EAAElC,MAAM4B,MAAR,EAPR;AAQLO,YAAU,EAAEnC,MAAM4B,MAAR,EARL;AASLQ,aAAW,EAAEpC,MAAM4B,MAAR,EATN;AAULS,YAAU,EAAErC,MAAM4B,MAAR;AAVL,EA3BkC;AAuCxCU,YAAW;AACVC,WAAS,EAAEvC,MAAM4B,MAAR,EADC;AAEVY,YAAU,EAAExC,MAAM4B,MAAR,EAFA;AAGVa,aAAW,EAAEzC,MAAMC,MAAR,EAAgBU,MAAM,CAAE,MAAF,EAAU,MAAV,EAAkB,MAAlB,EAA0B,OAA1B,EAAmC,MAAnC,CAAtB,EAHD;AAIV+B,WAAS,EAAE1C,MAAMC,MAAR,EAAgBU,MAAM,CAAE,QAAF,EAAY,QAAZ,EAAsB,OAAtB,EAA+B,MAA/B,CAAtB;AAJC,EAvC6B;AA6CxCgC,QAAM;AACLC,aAAW,EAAE5C,MAAM4B,MAAR,EAAgBiB,SAAS,CAAzB,EAA4BjC,UAAU,IAAtC,EADN;AAELkC,aAAW,EAAE9C,MAAM4B,MAAR,EAAgBiB,SAAS,CAAzB,EAA4BjC,UAAU,IAAtC;AAFN,EA7CkC;AAiDxCmC,SAAQ,EAAE/C,MAAMC,MAAR,EAAgBU,MAAM,CAAE,SAAF,EAAa,SAAb,EAAwB,SAAxB,EAAmC,YAAnC,EAAiD,KAAjD,EAAwD,UAAxD,EAAoE,MAApE,EAA4E,WAA5E,EAAyF,MAAzF,EAAiG,QAAjG,EAA2G,UAA3G,EAAuH,WAAvH,EAAoI,QAApI,EAA8I,UAA9I,CAAtB,EAjDgC;AAkDxC;AACAqC,OAAM,EAAEhD,MAAMC,MAAR,EAnDkC;AAoDxCgD,YAAW,EAAEjD,MAAMS,IAAR,EApD6B;AAqDxCyC,WAAU,EAAElD,MAAMS,IAAR;AArD8B,CAAX,CAAvB;;AAwDPX,eAAeqD,KAAf,CAAqB,EAAE,YAAY,CAAd,EAArB,EAAwC,EAAEC,oBAAoB,CAAtB,EAAxC;;AAEO,IAAMC,0BAAS,mBAASC,KAAT,CAAe,QAAf,EAAyBxD,cAAzB,CAAf;AACA,IAAMyD,8BAAW,mBAASD,KAAT,CAAe,UAAf,EAA2BxD,cAA3B,CAAjB","file":"EventOdd.js","sourcesContent":["import oddTypeList from '../utils/oddTypeList'\nimport sportList from '../utils/sportList'\nimport mongoose from 'mongoose'\nconst Schema = mongoose.Schema\n\nexport const EventOddSchema = new Schema({\n\tuniqueId: { type: String},\n\t// eventOddId: { type: String },\n\t// eventResultId: { type: String },\n\tsinglePickId: { type: String },\n\tradioPickId: { type: String },\n\tsource: {\n\t\tprovider: { type: String },\n\t\tbookmaker: { type: String },\n\t\tid: { type: String },\n\t\tlastUpdated: { type: Date }\n\t},\n\tsport: { type: String, enum: sportList, required: true },\n\toddType: { type: String, enum: oddTypeList, required: true },\n\tleague: { type: String },\n\tregion: { type: String },\n\tdetails: { type: String },\n\tmatchTime: { type: Date, required: true },\n\tcutOffTime: { type: Date },\n\tteam: {\n\t\thome: { type: String, required: true },\n\t\thomeROT: { type: String },\n\t\thomePitcher: { type: String },\n\t\taway: { type: String, required: true },\n\t\tawayROT: { type: String },\n\t\tawayPitcher: { type: String }\n\t},\n\todds: {\n\t\tmoneyLineHome: { type: Number },\n\t\tmoneyLineAway: { type: Number },\n\t\tpointSpreadHome: { type: Number },\n\t\tpointSpreadAway: { type: Number },\n\t\tpointSpreadHomeLine: { type: Number },\n\t\tpointSpreadAwayLine: { type: Number },\n\t\ttotalNumber: { type: Number },\n\t\toverLine: { type: Number },\n\t\tunderLine: { type: Number },\n\t\tdrawLine: { type: Number }\n\t},\n\tbetDetail: {\n\t\toddLine: { type: Number },\n\t\toddPoint: { type: Number },\n\t\toddTarget: { type: String, enum: [ 'Home', 'Away', 'Over', 'Under', 'Draw' ] },\n\t\tbetType: { type: String, enum: [ 'M-Line', 'Spread', 'Total', 'Draw' ] }\n\t},\n\tscore:{\n\t\thomeScore: { type: Number, default: 0, required: true },\n\t\tawayScore: { type: Number, default: 0, required: true }\n\t},\n\tstatus: { type: String, enum: [ 'Existed', 'Pending', 'TimeOut', 'HasUpdated', 'Won', 'Won Half', 'Lost', 'Lost Half', 'Push', 'Closed', 'Canceled', 'Postponed', 'Review', 'Finished' ] },\n\t// final: { type: Boolean }, // for result use only\n\tnote: { type: String },\n\tupdatedAt: { type: Date },\n\texpireAt: { type: Date }\n})\n\nEventOddSchema.index({ 'expireAt': 1 }, { expireAfterSeconds: 0 })\n\nexport const Result = mongoose.model('Result', EventOddSchema)\nexport const EventOdd = mongoose.model('EventOdd', EventOddSchema)"]}