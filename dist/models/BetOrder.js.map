{"version":3,"sources":["../../src/models/BetOrder.js"],"names":["Schema","BetOrderSchema","orderNumber","type","String","required","orderType","enum","owner","superAgent","Types","ObjectId","ref","agent","player","wagerDetail","betType","betAmount","Number","winAmount","riskAmount","status","resultAmount","default","eventOdds","note","createdAt","Date","now","updatedAt","requestCancel","Boolean","closedAt","OpenBet","model","HistoryBet"],"mappings":";;;;;;;AAAA;;AAEA;;;;;;AACA,IAAMA,SAAS,mBAASA,MAAxB;;AAEA,IAAMC,iBAAiB,IAAI,mBAASD,MAAb,CAAoB;AAC1CE,cAAa,EAAEC,MAAMC,MAAR,EAAgBC,UAAU,IAA1B,EAD6B;AAE1CC,YAAW,EAAEH,MAAMC,MAAR,EAAgBG,MAAM,CAAC,UAAD,EAAa,QAAb,EAAuB,YAAvB,EAAqC,YAArC,EAAmD,YAAnD,EAAiE,aAAjE,EAAgF,YAAhF,EAA8F,eAA9F,CAAtB,EAAsIF,UAAU,IAAhJ,EAF+B;AAG1CG,QAAM;AACLC,cAAa,EAAEN,MAAMH,OAAOU,KAAP,CAAaC,QAArB,EAA+BC,KAAK,YAApC,EADR;AAELC,SAAQ,EAAEV,MAAMH,OAAOU,KAAP,CAAaC,QAArB,EAA+BC,KAAK,OAApC,EAFH;AAGLE,UAAQ,EAAEX,MAAMH,OAAOU,KAAP,CAAaC,QAArB,EAA+BC,KAAK,QAApC;AAHH,EAHoC;AAQ1CG,cAAa;AACZC,WAAS,EAAEb,MAAMC,MAAR,EAAgBG,MAAK,CAAE,OAAF,EAAW,MAAX,CAArB,EAA0CF,UAAU,IAApD,EADG;AAEZY,aAAW,EAAEd,MAAMe,MAAR,EAAgBb,UAAU,IAA1B,EAFC;AAGZc,aAAW,EAAEhB,MAAMe,MAAR,EAAgBb,UAAU,IAA1B,EAHC;AAIZe,cAAY,EAAEjB,MAAMe,MAAR,EAAgBb,UAAU,IAA1B;AAJA,EAR6B;AAc1C;AACA;AACA;AACA;AACAgB,SAAQ,EAAElB,MAAMC,MAAR,EAAgBG,MAAM,CAAE,KAAF,EAAS,UAAT,EAAqB,MAArB,EAA6B,WAA7B,EAA0C,MAA1C,EAAkD,QAAlD,EAA4D,SAA5D,EAAuE,UAAvE,EAAmF,WAAnF,EAAgG,UAAhG,EAA4G,QAA5G,CAAtB,EAlBkC;AAmB1Ce,eAAc,EAAEnB,MAAMe,MAAR,EAAgBK,SAAS,CAAzB,EAnB4B;AAoB1CC,YAAW,0BApB+B;AAqB1CC,OAAM,EAAEtB,MAAMC,MAAR,EArBoC;AAsB1CsB,YAAW,EAAEvB,MAAMwB,IAAR,EAAcJ,SAASI,KAAKC,GAA5B,EAAiCvB,UAAU,IAA3C,EAtB+B;AAuB1CwB,YAAW,EAAE1B,MAAMwB,IAAR,EAvB+B;AAwB1CG,gBAAe,EAAE3B,MAAM4B,OAAR,EAAiBR,SAAS,KAA1B,EAxB2B;AAyB1CS,WAAU,EAAE7B,MAAMwB,IAAR;AAzBgC,CAApB,CAAvB;;AA6BO,IAAMM,4BAAW,mBAASC,KAAT,CAAe,SAAf,EAA0BjC,cAA1B,CAAjB;AACA,IAAMkC,kCAAa,mBAASD,KAAT,CAAe,YAAf,EAA6BjC,cAA7B,CAAnB","file":"BetOrder.js","sourcesContent":["import { EventOddSchema } from './EventOdd'\n\nimport mongoose from 'mongoose'\nconst Schema = mongoose.Schema\n\nconst BetOrderSchema = new mongoose.Schema({\n\torderNumber: { type: String, required: true },\n\torderType: { type: String, enum: ['Straight', 'Parlay', 'Teaser6040', 'Teaser6545', 'Teaser7050', 'SuperTeaser', 'WinReverse', 'ActionReverse'], required: true },\n\towner:{\n\t\tsuperAgent : { type: Schema.Types.ObjectId, ref: 'SuperAgent' },\n\t\tagent : { type: Schema.Types.ObjectId, ref: 'Agent' },\n\t\tplayer: { type: Schema.Types.ObjectId, ref: 'Player' }\n\t},\n\twagerDetail: {\n\t\tbetType: { type: String, enum:[ 'wager', 'risk' ], required: true },\n\t\tbetAmount: { type: Number, required: true },\n\t\twinAmount: { type: Number, required: true },\n\t\triskAmount: { type: Number, required: true }\n\t},\n\t// msg: {\n\t// \ttype: { type: String, enum: ['warning', 'error', 'success'], default: ''},\n\t// \tdetail: { type: String, default: ''}\n\t// },\n\tstatus: { type: String, enum: [ 'Won', 'Won Half', 'Lost', 'Lost Half', 'Push', 'Closed', 'Pending', 'Canceled', 'Postponed', 'Finished', 'Review' ] },\n\tresultAmount: { type: Number, default: 0 },\n\teventOdds: [EventOddSchema],\n\tnote: { type: String },\n\tcreatedAt: { type: Date, default: Date.now, required: true },\n\tupdatedAt: { type: Date },\n\trequestCancel: { type: Boolean, default: false },\n\tclosedAt: { type: Date }\n})\n\n\nexport const OpenBet  = mongoose.model('OpenBet', BetOrderSchema)\nexport const HistoryBet = mongoose.model('HistoryBet', BetOrderSchema)"]}