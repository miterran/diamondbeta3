{"version":3,"sources":["../../src/models/Person.js"],"names":["Schema","schema","firstName","String","lastName","pointOne","Number","pointTwo","total","PersonClass","v","name","firstSpace","indexOf","split","substr","findOne","loadClass","Person","model"],"mappings":";;;;;;;;AAAA;;;;;;;;AACA,IAAMA,SAAS,mBAASA,MAAxB;;AAEA,IAAMC,SAAS,IAAID,MAAJ,CAAW;AACzBE,aAAWC,MADc;AAEzBC,YAAUD,MAFe;AAGzBE,YAAUC,MAHe;AAIzBC,YAAUD,MAJe;AAKzBE,SAAOF;AALkB,CAAX,CAAf;;IAQMG,W;;;;;;;yCA8BgB;AACnB,aAAO,KAAKJ,QAAL,GAAgB,KAAKE,QAA5B;AACA;;AAGF;AACA;AACA;;AAED;AACE;AACA;AACA;;AAEA;;;;;AA3CA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;wBAGqB;AACpB,aAAO,KAAKF,QAAL,GAAgB,KAAKE,QAA5B;AACA;;;sBAEeG,C,EAAE;AACjB,WAAKF,KAAL,GAAaE,EAAEL,QAAF,GAAaK,EAAEH,QAA5B;AACA;;;mCAiBqBI,I,EAAM;AAC1B,UAAMC,aAAaD,KAAKE,OAAL,CAAa,GAAb,CAAnB;AACA,UAAMX,YAAYS,KAAKG,KAAL,CAAW,GAAX,EAAgB,CAAhB,CAAlB;AACA,UAAMV,WAAWQ,eAAe,CAAC,CAAhB,GAAoB,EAApB,GAAyBD,KAAKI,MAAL,CAAYH,aAAa,CAAzB,CAA1C;AACA,aAAO,KAAKI,OAAL,CAAa,EAAEd,oBAAF,EAAaE,kBAAb,EAAb,CAAP;AACD;;;;;;AAGHH,OAAOgB,SAAP,CAAiBR,WAAjB;;AAEA,IAAMS,SAAS,mBAASC,KAAT,CAAe,QAAf,EAAyBlB,MAAzB,CAAf;;kBAEeiB,M","file":"Person.js","sourcesContent":["import mongoose from 'mongoose'\nconst Schema = mongoose.Schema\n\nconst schema = new Schema({ \n\tfirstName: String, \n\tlastName: String,\n\tpointOne: Number,\n\tpointTwo: Number,\n\ttotal: Number\n});\n\nclass PersonClass {\n  // `fullName` becomes a virtual\n  // get fullName() {\n  //   return `${this.firstName} ${this.lastName}`;\n  // }\n\n  // set fullName(v) {\n  // \tconsole.log(v)\n  //   const firstSpace = v.indexOf(' ');\n  //   this.firstName = v.split(' ')[0];\n  //   this.lastName = firstSpace === -1 ? '' : v.substr(firstSpace + 1);\n  // }\n\n  // totalNumber(){\n  // \treturn this.num1 + this.num2\n  // }\n\n  // get totalNumber(){\n  // \treturn this.total\n  // }\n\n\n  get fullTotalNumber(){\n  \treturn this.pointOne + this.pointTwo\n  }\n\n  set totalNumber(v){\n  \tthis.total = v.pointOne + v.pointTwo\n  }\n\n  getFullTotalNumber(){\n  \treturn this.pointOne + this.pointTwo\n  }\n\n\n\t// const newPerson = new Person({})\n\t// newPerson.fullName = 'hi you'\n\t// res.json(newPerson)\n\n//  `getFullName()` becomes a document method\n  // getFullName() {\n  //   return `${this.firstName} ${this.lastName}`;\n  // }\n\n  // `findByFullName()` becomes a static\n  static findByFullName(name) {\n    const firstSpace = name.indexOf(' ');\n    const firstName = name.split(' ')[0];\n    const lastName = firstSpace === -1 ? '' : name.substr(firstSpace + 1);\n    return this.findOne({ firstName, lastName });\n  }\n}\n\nschema.loadClass(PersonClass);\n\nconst Person = mongoose.model('Person', schema);\n\nexport default Person"]}