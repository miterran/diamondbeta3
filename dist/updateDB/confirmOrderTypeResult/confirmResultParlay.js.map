{"version":3,"sources":["../../../src/updateDB/confirmOrderTypeResult/confirmResultParlay.js"],"names":["confirmResultParlay","openBet","betOrderStatus","resultAmount","eventsHaveWon","some","eventOdds","status","eventsHaveLost","eventsHaveReview","eventsHavePending","allEventsWon","every","allEventsLost","allEventsPush","allEventsCanceled","allEventsPostponed","wagerDetail","winAmount","riskAmount","map","event","parlayPoint","compact","betDetail","oddLine","Math","abs","riskPoint","reduce","a","b","toFixed","console","log","orderNumber","newHistoryBet","orderType","owner","createdAt","closedAt","save","findOneAndRemove","_id"],"mappings":"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","file":"confirmResultParlay.js","sourcesContent":["import { OpenBet, HistoryBet } from '../../models/BetOrder';\nimport _ from 'lodash'\nimport moment from 'moment'\nconst confirmResultParlay = async (openBet) => {\n\n\tlet betOrderStatus = 'TBD'\n\tlet resultAmount = 0\n\n\tconst eventsHaveWon       = _.some(openBet.eventOdds, { status: 'Won' })\n\tconst eventsHaveLost      = _.some(openBet.eventOdds, { status: 'Lost' })\n\n//\tconst eventsHavePush      = _.some(openBet.eventOdds, { status: 'Push' })\n//\tconst eventsHavePostponed = _.some(openBet.eventOdds, { status: 'Postponed' })\n//\tconst eventsHaveCanceled  = _.some(openBet.eventOdds, { status: 'Canceled' })\n\tconst eventsHaveReview    = _.some(openBet.eventOdds, { status: 'Review' })\n\tconst eventsHavePending   = _.some(openBet.eventOdds, { status: 'Pending' })\n\t\n\tconst allEventsWon        = _.every(openBet.eventOdds, { status: 'Won' })\n\tconst allEventsLost       = _.every(openBet.eventOdds, { status: 'Lost' })\n\n\tconst allEventsPush       = _.every(openBet.eventOdds, { status: 'Push' })\n\tconst allEventsCanceled   = _.every(openBet.eventOdds, { status: 'Postponed' })\n\tconst allEventsPostponed  = _.every(openBet.eventOdds, { status: 'Canceled' })\n//\tconst allEventsReview     = _.every(openBet.eventOdds, { status: 'Review' })\n\t// const allEventsPending    = _.every(openBet.eventOdds, { status: 'Pending' })\n\n\tswitch(true){\n\t\tcase allEventsWon:\n\t\t\tbetOrderStatus = 'Won'\n\t\t\tresultAmount = openBet.wagerDetail.winAmount\n\t\t\tbreak;\n\t\tcase allEventsLost:\n\t\t\tbetOrderStatus = 'Lost'\n\t\t\tresultAmount = -openBet.wagerDetail.riskAmount\n\t\t\tbreak;\n\t\tcase allEventsPush:\n\t\t\tbetOrderStatus = 'Push'\n\t\t\tresultAmount = 0\n\t\t\tbreak;\n\t\tcase allEventsCanceled:\n\t\t\tbetOrderStatus = 'Canceled'\n\t\t\tresultAmount = 0\n\t\t\tbreak;\n\t\tcase allEventsPostponed:\n\t\t\tbetOrderStatus = 'Postponed'\n\t\t\tresultAmount = 0\n\t\t\tbreak;\n\t\tcase eventsHaveLost:\n\t\t\tbetOrderStatus = 'Lost'\n\t\t\tresultAmount = -openBet.wagerDetail.riskAmount\n\t\t\topenBet.eventOdds.map(event => {\n\t\t\t\tif(event.status !== 'Lost'){\n\t\t\t\t\tevent.status = 'Closed'\n\t\t\t\t}\n\t\t\t\treturn event\n\t\t\t})\n\t\t\tbreak;\n\t\tcase eventsHaveWon && !eventsHaveLost && !eventsHaveReview && !eventsHavePending:\n\t\t\tconst parlayPoint = _.compact(openBet.eventOdds.map(event => {\n\t\t\t\tif(event.status === 'Won'){\n\t\t\t\t\tif(event.betDetail.oddLine > 0){\n\t\t\t\t\t\treturn (event.betDetail.oddLine + 100) / 100\n\t\t\t\t\t}else{\n\t\t\t\t\t\treturn (Math.abs(event.betDetail.oddLine) + 100) / Math.abs(event.betDetail.oddLine)\n\t\t\t\t\t}\n\t\t\t\t}else{\n\t\t\t\t\treturn null\n\t\t\t\t}\n\t\t\t}))\n\t\t\tconst riskPoint = parlayPoint.reduce((a, b) => a * b)\n\t\t\tresultAmount = ((openBet.wagerDetail.riskAmount * riskPoint - openBet.wagerDetail.riskAmount) * 1).toFixed()\n\t\t\tbetOrderStatus = 'Won'\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tconsole.log(openBet.orderNumber + ' parlay not finished')\n\t\t\treturn false;\n\t}\n\n\tif(betOrderStatus !== 'TBD'){\n\t\tconst newHistoryBet = new HistoryBet({\n\t\t\torderNumber: openBet.orderNumber,\n\t\t\torderType: openBet.orderType,\n\t\t\towner: openBet.owner,\n\t\t\twagerDetail: openBet.wagerDetail,\n\t\t\tstatus: betOrderStatus,\n\t\t\tresultAmount: resultAmount,\n\t\t\teventOdds: openBet.eventOdds,\n\t\t\tcreatedAt: openBet.createdAt,\n\t\t\tclosedAt: moment()\n\t\t})\n\t\n\t\tawait newHistoryBet.save()\n\t\tconsole.log('saved history straight bet' + newHistoryBet.orderNumber)\n\t\tawait OpenBet.findOneAndRemove({ _id: openBet._id })\n\t\tconsole.log('deleted openbet ' + openBet.orderNumber)\n\t\treturn true\n\n\t}\n\n}\n\nexport default confirmResultParlay"]}