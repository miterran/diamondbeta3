{"version":3,"sources":["../../../src/updateDB/confirmOrderTypeResult/confirmResultParlay.js"],"names":["confirmResultParlay","openBet","betOrderStatus","resultAmount","eventsHaveWon","some","eventOdds","status","eventsHaveLost","eventsHaveReview","eventsHavePending","allEventsWon","every","allEventsLost","allEventsPush","allEventsCanceled","allEventsPostponed","wagerDetail","winAmount","riskAmount","Number","map","event","parlayPoint","compact","oddLine","betDetail","Math","abs","riskPoint","reduce","a","b","toFixed","console","log","orderNumber","newHistoryBet","orderType","owner","createdAt","closedAt","save","findOneAndRemove","_id"],"mappings":"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","file":"confirmResultParlay.js","sourcesContent":["import { OpenBet, HistoryBet } from '../../models/BetOrder';\nimport _ from 'lodash'\nimport moment from 'moment'\nconst confirmResultParlay = async (openBet) => {\n\n\tlet betOrderStatus = 'TBD'\n\tlet resultAmount = 0\n\n\tconst eventsHaveWon       = _.some(openBet.eventOdds, { status: 'Won' })\n\tconst eventsHaveLost      = _.some(openBet.eventOdds, { status: 'Lost' })\n\n//\tconst eventsHavePush      = _.some(openBet.eventOdds, { status: 'Push' })\n//\tconst eventsHavePostponed = _.some(openBet.eventOdds, { status: 'Postponed' })\n//\tconst eventsHaveCanceled  = _.some(openBet.eventOdds, { status: 'Canceled' })\n\tconst eventsHaveReview    = _.some(openBet.eventOdds, { status: 'Review' })\n\tconst eventsHavePending   = _.some(openBet.eventOdds, { status: 'Pending' })\n\t\n\tconst allEventsWon        = _.every(openBet.eventOdds, { status: 'Won' })\n\tconst allEventsLost       = _.every(openBet.eventOdds, { status: 'Lost' })\n\n\tconst allEventsPush       = _.every(openBet.eventOdds, { status: 'Push' })\n\tconst allEventsCanceled   = _.every(openBet.eventOdds, { status: 'Postponed' })\n\tconst allEventsPostponed  = _.every(openBet.eventOdds, { status: 'Canceled' })\n//\tconst allEventsReview     = _.every(openBet.eventOdds, { status: 'Review' })\n\t// const allEventsPending    = _.every(openBet.eventOdds, { status: 'Pending' })\n\n\tlet { winAmount, riskAmount } = openBet.wagerDetail\n\twinAmount = Number(winAmount)\n\triskAmount = Number(riskAmount)\n\n\tswitch(true){\n\t\tcase allEventsWon:\n\t\t\tbetOrderStatus = 'Won'\n\t\t\tresultAmount = winAmount\n\t\t\tbreak;\n\t\tcase allEventsLost:\n\t\t\tbetOrderStatus = 'Lost'\n\t\t\tresultAmount = -riskAmount\n\t\t\tbreak;\n\t\tcase allEventsPush:\n\t\t\tbetOrderStatus = 'Push'\n\t\t\tresultAmount = 0\n\t\t\tbreak;\n\t\tcase allEventsCanceled:\n\t\t\tbetOrderStatus = 'Canceled'\n\t\t\tresultAmount = 0\n\t\t\tbreak;\n\t\tcase allEventsPostponed:\n\t\t\tbetOrderStatus = 'Postponed'\n\t\t\tresultAmount = 0\n\t\t\tbreak;\n\t\tcase eventsHaveLost:\n\t\t\tbetOrderStatus = 'Lost'\n\t\t\tresultAmount = -riskAmount\n\t\t\topenBet.eventOdds.map(event => {\n\t\t\t\tif(event.status !== 'Lost'){\n\t\t\t\t\tevent.status = 'Closed'\n\t\t\t\t}\n\t\t\t\treturn event\n\t\t\t})\n\t\t\tbreak;\n\t\tcase eventsHaveWon && !eventsHaveLost && !eventsHaveReview && !eventsHavePending:\n\t\t\tconst parlayPoint = _.compact(openBet.eventOdds.map(event => {\n\t\t\t\tlet { oddLine } = event.betDetail\n\t\t\t\toddLine = Number(oddLine)\n\t\t\t\tif(event.status === 'Won'){\n\t\t\t\t\tif(oddLine > 0){\n\t\t\t\t\t\treturn (oddLine + 100) / 100\n\t\t\t\t\t}else{\n\t\t\t\t\t\treturn (Math.abs(oddLine) + 100) / Math.abs(oddLine)\n\t\t\t\t\t}\n\t\t\t\t}else{\n\t\t\t\t\treturn null\n\t\t\t\t}\n\t\t\t}))\n\t\t\tconst riskPoint = parlayPoint.reduce((a, b) => Number(a) * Number(b))\n\t\t\tresultAmount = ((riskAmount * riskPoint - riskAmount) * 1).toFixed()\n\t\t\tbetOrderStatus = 'Won'\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tconsole.log(openBet.orderNumber + ' parlay not finished')\n\t\t\treturn false;\n\t}\n\n\tif(betOrderStatus !== 'TBD'){\n\t\tconst newHistoryBet = new HistoryBet({\n\t\t\torderNumber: openBet.orderNumber,\n\t\t\torderType: openBet.orderType,\n\t\t\towner: openBet.owner,\n\t\t\twagerDetail: openBet.wagerDetail,\n\t\t\tstatus: betOrderStatus,\n\t\t\tresultAmount: resultAmount,\n\t\t\teventOdds: openBet.eventOdds,\n\t\t\tcreatedAt: openBet.createdAt,\n\t\t\tclosedAt: moment()\n\t\t})\n\t\n\t\tawait newHistoryBet.save()\n\t\tconsole.log('saved history straight bet' + newHistoryBet.orderNumber)\n\t\tawait OpenBet.findOneAndRemove({ _id: openBet._id })\n\t\tconsole.log('deleted openbet ' + openBet.orderNumber)\n\t\treturn true\n\n\t}\n\n}\n\nexport default confirmResultParlay"]}