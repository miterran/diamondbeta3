{"version":3,"sources":["../../../src/updateDB/confirmOrderTypeResult/confirmResultReverse.js"],"names":["confirmResultReverse","openBet","eventsHaveWon","some","eventOdds","status","eventsHaveLost","eventsHavePush","eventsHavePostponed","eventsHaveCanceled","eventsHaveReview","eventsHavePending","allEventsWon","every","allEventsLost","allEventsPush","allEventsCanceled","allEventsPostponed","allEventsReview","allEventsPending","betOrderStatus","resultAmount","teamLength","range","length","inOrder","orderList","betAmount","wagerDetail","Number","forEach","list","idx","betDetail","winAmount","oddLine","Math","round","abs","orderType"],"mappings":"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","file":"confirmResultReverse.js","sourcesContent":["import { OpenBet, HistoryBet } from '../../models/BetOrder';\nimport moment from 'moment'\nimport permutation from '../../utils/permutation'\nimport multiDimensionalUnique from '../../utils/multiDimensionalUnique'\nimport _ from 'lodash'\n\nimport Agent from '../../models/Agent';\nimport AgentTransaction from '../../models/AgentTransaction';\nimport saveNewHistoryBet from './utils/saveNewHistoryBet'\n\n\nconst confirmResultReverse = async (openBet) => {\n\n\tconst eventsHaveWon       = _.some(openBet.eventOdds, { status: 'Won' })\n\tconst eventsHaveLost      = _.some(openBet.eventOdds, { status: 'Lost' })\n\tconst eventsHavePush      = _.some(openBet.eventOdds, { status: 'Push' })\n\tconst eventsHavePostponed = _.some(openBet.eventOdds, { status: 'Postponed' })\n\tconst eventsHaveCanceled  = _.some(openBet.eventOdds, { status: 'Canceled' })\n\tconst eventsHaveReview    = _.some(openBet.eventOdds, { status: 'Review' })\n\tconst eventsHavePending   = _.some(openBet.eventOdds, { status: 'Pending' })\n\t\n\tconst allEventsWon        = _.every(openBet.eventOdds, { status: 'Won' })\n\tconst allEventsLost       = _.every(openBet.eventOdds, { status: 'Lost' })\n\tconst allEventsPush       = _.every(openBet.eventOdds, { status: 'Push' })\n\tconst allEventsCanceled   = _.every(openBet.eventOdds, { status: 'Postponed' })\n\tconst allEventsPostponed  = _.every(openBet.eventOdds, { status: 'Canceled' })\n\tconst allEventsReview     = _.every(openBet.eventOdds, { status: 'Review' })\n\tconst allEventsPending    = _.every(openBet.eventOdds, { status: 'Pending' })\n\n\t//case !eventsHaveWon && !eventsHaveLost && !eventsHavePush && !eventsHavePending && ( eventsHavePostponed || eventsHaveCanceled ):\n\n\tlet betOrderStatus = 'TBD'\n\tlet resultAmount = 0\n\n\tconst teamLength = _.range(openBet.eventOdds.length)\n\tconst inOrder = permutation(teamLength)\n\tconst orderList = multiDimensionalUnique(inOrder)\n\tlet { betAmount } = openBet.wagerDetail\n\tbetAmount = Number(betAmount)\n\n\n\tif(allEventsCanceled || allEventsPostponed || (!eventsHaveWon && !eventsHaveLost && !eventsHavePush && !eventsHavePending && ( eventsHavePostponed || eventsHaveCanceled ))){\n\t\tbetOrderStatus = 'Canceled'\n\t\tresultAmount = 0\n\t}else if(!eventsHaveReview && !allEventsReview && !allEventsPending && !eventsHavePending){\n\t\torderList.forEach(list => {\n\t\t\tfor(let idx of list){\n\t\t\t\tconst { status, betDetail } = openBet.eventOdds[idx]\n\t\t\t\tswitch(status){\n\t\t\t \t\tcase 'Won':\n\t\t\t \t\t\tlet winAmount = 0\n\t\t\t \t\t\tif(Number(betDetail.oddLine) > 0){\n\t\t\t \t\t\t\twinAmount = Math.round(betAmount * Number(betDetail.oddLine) / 100)\n\t\t\t \t\t\t}else{\n\t\t\t \t\t\t\twinAmount = Math.round(betAmount / Math.abs(Number(betDetail.oddLine)) * 100)\n\t\t\t \t\t\t}\n\t\t\t \t\t\tresultAmount += winAmount\n\t\t\t \t\t\tbreak;\n\t\t\t \t\tcase 'Lost':\n\t\t\t \t\t\tresultAmount -= betAmount\n\t\t\t \t\t\treturn\n\t\t\t \t\tcase 'Push':\n\t\t\t \t\tcase 'Canceled':\n\t\t\t \t\tcase 'Postponed':\n\t\t\t \t\t\tif(openBet.orderType === 'ActionReverse'){\n\t\t\t \t\t\t\tbreak;\n\t\t\t \t\t\t}\n\t\t\t \t\t\tif(openBet.orderType === 'WinReverse'){\n\t\t\t \t\t\t\treturn;\n\t\t\t \t\t\t}\n\t\t\t \t\tdefault:\n\t\t\t \t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t\tif(resultAmount === 0){\n\t\t\tbetOrderStatus = 'Push'\n\t\t}\n\n\t\tif(resultAmount > 0){\n\t\t\tbetOrderStatus = 'Won'\n\t\t}\n\n\t\tif(resultAmount < 0){\n\t\t\tbetOrderStatus = 'Lost'\n\t\t}\n\t}\n\n\tif(betOrderStatus !== 'TBD'){\n\n\t\tawait saveNewHistoryBet(openBet, betOrderStatus, resultAmount)\n\n\t\treturn true\n\n\t}else{\n\t\treturn false\n\t}\n\n}\n\nexport default confirmResultReverse\n"]}