{"version":3,"sources":["../../../src/updateDB/confirmOrderTypeResult/confirmResultReverse.js"],"names":["confirmResultReverse","openBet","allEventsReview","every","eventOdds","status","allEventsPending","allEventsCanceled","allEventsPostponed","eventsHaveReview","some","eventsHavePending","betOrderStatus","resultAmount","teamLength","range","length","inOrder","orderList","betAmount","wagerDetail","Number","forEach","list","idx","betDetail","winAmount","oddLine","Math","round","abs","orderType","newHistoryBet","orderNumber","owner","toFixed","createdAt","closedAt","save","console","log","findOneAndRemove","_id"],"mappings":"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","file":"confirmResultReverse.js","sourcesContent":["import { OpenBet, HistoryBet } from '../../models/BetOrder';\nimport moment from 'moment'\nimport permutation from '../../utils/permutation'\nimport multiDimensionalUnique from '../../utils/multiDimensionalUnique'\nimport _ from 'lodash'\n\n\nconst confirmResultReverse = async (openBet) => {\n\n\tconst allEventsReview     = _.every(openBet.eventOdds, { status: 'Review' })\n\tconst allEventsPending    = _.every(openBet.eventOdds, { status: 'Pending' })\n\tconst allEventsCanceled   = _.every(openBet.eventOdds, { status: 'Postponed' })\n\tconst allEventsPostponed  = _.every(openBet.eventOdds, { status: 'Canceled' })\n\n\tconst eventsHaveReview    = _.some(openBet.eventOdds, { status: 'Review' })\n\tconst eventsHavePending   = _.some(openBet.eventOdds, { status: 'Pending' })\n\n\tlet betOrderStatus = 'TBD'\n\tlet resultAmount = 0\n\n\tconst teamLength = _.range(openBet.eventOdds.length)\n\tconst inOrder = permutation(teamLength)\n\tconst orderList = multiDimensionalUnique(inOrder)\n\tlet { betAmount } = openBet.wagerDetail\n\tbetAmount = Number(betAmount)\n\n\n\tif(allEventsCanceled){\n\t\tbetOrderStatus = 'Canceled'\n\t\tresultAmount = 0\n\t}else if(allEventsPostponed){\n\t\tbetOrderStatus = 'Postponed'\n\t\tresultAmount = 0\n\t}else if(!eventsHaveReview && !allEventsReview && !allEventsPending && !eventsHavePending){\n\t\torderList.forEach(list => {\n\t\t\tfor(let idx of list){\n\t\t\t\tconst { status, betDetail } = openBet.eventOdds[idx]\n\t\t\t\tswitch(status){\n\t\t\t \t\tcase 'Won':\n\t\t\t \t\t\tlet winAmount = 0\n\t\t\t \t\t\tif(Number(betDetail.oddLine) > 0){\n\t\t\t \t\t\t\twinAmount = Math.round(betAmount * Number(betDetail.oddLine) / 100)\n\t\t\t \t\t\t}else{\n\t\t\t \t\t\t\twinAmount = Math.round(betAmount / Math.abs(Number(betDetail.oddLine)) * 100)\n\t\t\t \t\t\t}\n\t\t\t \t\t\tresultAmount += winAmount\n\t\t\t \t\t\tbreak;\n\t\t\t \t\tcase 'Lost':\n\t\t\t \t\t\tresultAmount -= betAmount\n\t\t\t \t\t\treturn\n\t\t\t \t\tcase 'Push':\n\t\t\t \t\tcase 'Canceled':\n\t\t\t \t\tcase 'Postponed':\n\t\t\t \t\t\tif(openBet.orderType === 'ActionReverse'){\n\t\t\t \t\t\t\tbreak;\n\t\t\t \t\t\t}\n\t\t\t \t\t\tif(openBet.orderType === 'WinReverse'){\n\t\t\t \t\t\t\treturn;\n\t\t\t \t\t\t}\n\t\t\t \t\tdefault:\n\t\t\t \t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t\tif(resultAmount === 0){\n\t\t\tbetOrderStatus = 'Push'\n\t\t}\n\n\t\tif(resultAmount > 0){\n\t\t\tbetOrderStatus = 'Won'\n\t\t}\n\n\t\tif(resultAmount < 0){\n\t\t\tbetOrderStatus = 'Lost'\n\t\t}\n\t}\n\n\n\n\n\n\tif(betOrderStatus !== 'TBD'){\n\t\tconst newHistoryBet = new HistoryBet({\n\t\t\torderNumber: openBet.orderNumber,\n\t\t\torderType: openBet.orderType,\n\t\t\towner: openBet.owner,\n\t\t\twagerDetail: openBet.wagerDetail,\n\t\t\tstatus: betOrderStatus,\n\t\t\tresultAmount: resultAmount.toFixed(),\n\t\t\teventOdds: openBet.eventOdds,\n\t\t\tcreatedAt: openBet.createdAt,\n\t\t\tclosedAt: moment()\n\t\t})\n\t\n\t\tawait newHistoryBet.save()\n\t\tconsole.log('saved history straight bet' + newHistoryBet.orderNumber)\n\t\tawait OpenBet.findOneAndRemove({ _id: openBet._id })\n\t\tconsole.log('deleted openbet ' + openBet.orderNumber)\n\t\treturn true\n\n\t}\n\n}\n\nexport default confirmResultReverse\n\n\n\n// export const handleReverseChangeRiskAmount = (e) => {\n// \treturn (dispatch, getState) => {\n\n// \t\tconst { orderType } = getState().playerUtilsReducer\n// \t\tconst reverseEvents = getState().playerOddWagerReducer.oddWagerPickList\n// //\t\tconst betAmount = Number(e.target.value) * reverseEvents.length\n\n// \t\tconst reverseOddLine = reverseEvents.map(event => {\n// \t\t\tif(event.betDetail.oddLine > 0){\n// \t\t\t\treturn Math.round(Number(e.target.value) * event.betDetail.oddLine / 100)\n// \t\t\t}else{\n// \t\t\t\treturn Math.round(Number(e.target.value) / Math.abs(event.betDetail.oddLine) * 100)\n// \t\t\t}\n// \t\t})\n\n// \t\tconst singleRisk = reverseOddLine.reduce((total, value) => total += value)\n// \t\tconst riskAmount = ( reverseEvents.length - 1 ) * reverseEvents.length * Number(e.target.value)\n// \t\tconst winAmount = ( reverseEvents.length - 1 ) * 2 * singleRisk\n\t\t\n\n// \t\tconst wagerDetail = {\n// \t\t\tbetType: 'risk',\n// \t\t\tbetAmount: Number(e.target.value).toFixed(),\n// \t\t\triskAmount: Number(riskAmount).toFixed(),\n// \t\t\twinAmount: Number(winAmount).toFixed(),\n// \t\t\tconfirm: false\n// \t\t}\n// \t\treturn dispatch({\n// \t\t\ttype: 'HANDLE_REVERSE_CHANGE_RISK_AMOUNT', payload: wagerDetail\n// \t\t})\n// \t}\n// }"]}