{"version":3,"sources":["../../../src/updateDB/updateUser/updateAgentStatusAfterOrder.js"],"names":["updateAgentStatusAfterOrder","AgentId","changeAmount","findOne","_id","Types","ObjectId","agent","find","agentOpenBets","agentCreditPending","reduce","total","openBet","wagerDetail","riskAmount","activePlayerCounter","uniqBy","concat","apply","map","owner","player","agentCurrentStatus","activePlayer","length","credit","currentStatus","creditPending","availableCredit","findOneAndUpdate"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;;;;;AACA;AACA,IAAMA;AAAA,sDAA8B,iBAAOC,OAAP,EAAgBC,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAGd,gBAAMC,OAAN,CAAc,EAAEC,KAAK,mBAASC,KAAT,CAAeC,QAAf,CAAwBL,OAAxB,CAAP,EAAd,EAAwD,eAAxD,CAHc;;AAAA;AAG5BM,WAH4B;AAAA;AAAA,aAKN,kBAAQC,IAAR,CAAa,EAAE,eAAe,mBAASH,KAAT,CAAeC,QAAf,CAAwBL,OAAxB,CAAjB,EAAb,EAAkE,qEAAlE,CALM;;AAAA;AAK5BQ,mBAL4B;AAM5BC,wBAN4B,GAMPD,cAAcE,MAAd,CAAqB,UAACC,KAAD,EAAQC,OAAR;AAAA,cAAoBD,QAAQC,QAAQC,WAAR,CAAoBC,UAAhD;AAAA,OAArB,EAAiF,CAAjF,CANO;AAO5BC,yBAP4B,GAON,iBAAEC,MAAF,CAAS,GAAGC,MAAH,CAAUC,KAAV,CAAgB,EAAhB,EAAoBV,cAAcW,GAAd,CAAkB;AAAA,cAAWP,QAAQQ,KAAR,CAAcC,MAAzB;AAAA,OAAlB,CAApB,CAAT,CAPM;AAS5BC,wBAT4B,GASP;AAC1BC,qBAAcR,oBAAoBS,MADR;AAE1BC,eAAQnB,MAAMoB,aAAN,CAAoBD,MAApB,GAA6BxB,YAFX;AAG1B0B,sBAAelB,kBAHW;AAI1BmB,wBAAiBtB,MAAMoB,aAAN,CAAoBD,MAApB,GAA6BxB,YAA7B,GAA4CQ;AAJnC,OATO;AAAA;AAAA,aAgB5B,gBAAMoB,gBAAN,CAAuB,EAAE1B,KAAK,mBAASC,KAAT,CAAeC,QAAf,CAAwBL,OAAxB,CAAP,EAAvB,EAAkE,EAAC,QAAQ,EAAE0B,eAAeJ,kBAAjB,EAAT,EAAlE,CAhB4B;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAA9B;;AAAA;AAAA;AAAA;AAAA,GAAN;;kBAuBevB,2B","file":"updateAgentStatusAfterOrder.js","sourcesContent":["import Agent from '../../models/Agent';\nimport Player from '../../models/Player'\nimport { OpenBet, HistoryBet } from '../../models/BetOrder';\nimport moment from 'moment'\nimport mongoose from 'mongoose'\nimport _ from 'lodash'\n// update agent current status every time order changed\nconst updateAgentStatusAfterOrder = async (AgentId, changeAmount) => {\n\n\ttry {\n\t\tconst agent = await Agent.findOne({ _id: mongoose.Types.ObjectId(AgentId)}, 'currentStatus')\n\n\t\tconst agentOpenBets = await OpenBet.find({ 'owner.agent': mongoose.Types.ObjectId(AgentId) }, 'orderType wagerDetail.riskAmount wagerDetail.winAmount owner.player')\n\t\tconst agentCreditPending = agentOpenBets.reduce((total, openBet) => total + openBet.wagerDetail.riskAmount, 0)\n\t\tconst activePlayerCounter = _.uniqBy([].concat.apply([], agentOpenBets.map(openBet => openBet.owner.player)))\n\n\t\tconst agentCurrentStatus = {\n\t\t\tactivePlayer: activePlayerCounter.length,\n\t\t\tcredit: agent.currentStatus.credit + changeAmount,\n\t\t\tcreditPending: agentCreditPending,\n\t\t\tavailableCredit: agent.currentStatus.credit + changeAmount - agentCreditPending\n\t\t}\n\t\t\n\t\tawait Agent.findOneAndUpdate({ _id: mongoose.Types.ObjectId(AgentId) }, {'$set': { currentStatus: agentCurrentStatus }})\n\t\t\n\t}catch(err){\n\t\tthrow err\n\t}\n}\n\nexport default updateAgentStatusAfterOrder\n\n"]}