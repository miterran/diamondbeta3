{"version":3,"sources":["../../src/updateDB/A1_fetch_jsonOdd_eventOdds.js"],"names":["axiosJsonOdd","create","headers","jsonOddApiKey","fetch_jsonOdd_eventOdds","find","provider","activate","jsonOddList","isEmpty","Promise","all","map","sportLeague","get","apiLink","events","data","console","log","league","event","isBefore","utc","MatchTime","subtract","format","Odds","odd","newEventOdd","source","bookmaker","SiteID","toString","id","ID","lastUpdated","LastUpdated","sport","oddType","OddType","matchTime","cutOffTime","team","home","HomeTeam","homeROT","HomeROT","away","AwayTeam","awayROT","AwayROT","details","Details","odds","moneyLineHome","Number","MoneyLineHome","moneyLineAway","MoneyLineAway","pointSpreadHome","PointSpreadHome","pointSpreadAway","PointSpreadAway","pointSpreadHomeLine","PointSpreadHomeLine","pointSpreadAwayLine","PointSpreadAwayLine","totalNumber","TotalNumber","overLine","OverLine","underLine","UnderLine","drawLine","DrawLine","updatedAt","expireAt","checkOddPoints","pick","allZero","Object","values","every","val","homePitcher","HomePitcher","awayPitcher","AwayPitcher","region","hasOwnProperty","League","Name","DisplayRegion","uniqueId","replace","toUpperCase","findOne","existedEventOdd","save","isSame","findOneAndUpdate","$set","catch","err"],"mappings":"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","file":"A1_fetch_jsonOdd_eventOdds.js","sourcesContent":["import config from '../config'\nimport Provider from '../models/Provider';\nimport { EventOdd } from '../models/EventOdd';\n\nimport _ from 'lodash'\nimport moment from 'moment'\nimport axios from 'axios'\nconst axiosJsonOdd = axios.create({ headers: {'JsonOdds-API-Key': config.jsonOddApiKey}})\n\n\nconst fetch_jsonOdd_eventOdds = async () => {\n\ttry{\n\t\tconst jsonOddList = await Provider.find({ provider: 'jsonOdd', activate: true })\n\t\tif(!_.isEmpty(jsonOddList)){\n\t\t\tawait Promise.all(jsonOddList.map(async sportLeague => {\n\t\t\t\tconst events = await axiosJsonOdd.get(sportLeague.apiLink)\n\t\t\t\tif(!_.isEmpty(events.data)){\n\t\t\t\t\tconsole.log(`jsonOdd ${sportLeague.league} has event`)\n\t\t\t\t\tawait Promise.all(events.data.map(async event => {\n\t\t\t\t\t\tif(moment().isBefore(moment.utc(event.MatchTime).subtract(1, 'seconds').format())) { \n\t\t\t\t\t\t\tawait Promise.all(event.Odds.map(async odd => {\n\t\t\t\t\t\t\t\tlet newEventOdd = {\n\n\t\t\t\t\t\t\t\t\tsource: {\n\t\t\t\t\t\t\t\t\t\tprovider: `jsonOdd`,\n\t\t\t\t\t\t\t\t\t\tbookmaker: odd.SiteID.toString(),\n\t\t\t\t\t\t\t\t\t\tid: event.ID,\n\t\t\t\t\t\t\t\t\t\tlastUpdated: moment.utc(odd.LastUpdated)\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tsport: sportLeague.sport,\n\t\t\t\t\t\t\t\t\toddType: odd.OddType,\n\t\t\t\t\t\t\t\t\tmatchTime: moment.utc(event.MatchTime),\n\t\t\t\t\t\t\t\t\tcutOffTime: moment.utc(event.MatchTime).subtract(1, 'seconds'),\n\t\t\t\t\t\t\t\t\tteam: {\n\t\t\t\t\t\t\t\t\t\thome: event.HomeTeam,\n\t\t\t\t\t\t\t\t\t\thomeROT: event.HomeROT,\n\t\t\t\t\t\t\t\t\t\taway: event.AwayTeam,\n\t\t\t\t\t\t\t\t\t\tawayROT: event.AwayROT\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tdetails: event.Details || '',\n\t\t\t\t\t\t\t\t\todds: {\n\t\t\t\t\t\t\t\t\t\tmoneyLineHome: Number(odd.MoneyLineHome) || 0,\n\t\t\t\t\t\t\t\t\t\tmoneyLineAway: Number(odd.MoneyLineAway) || 0,\n\t\t\t\t\t\t\t\t\t\tpointSpreadHome: Number(odd.PointSpreadHome) || 0,\n\t\t\t\t\t\t\t\t\t\tpointSpreadAway: Number(odd.PointSpreadAway) || 0,\n\t\t\t\t\t\t\t\t\t\tpointSpreadHomeLine: Number(odd.PointSpreadHomeLine) || 0,\n\t\t\t\t\t\t\t\t\t\tpointSpreadAwayLine: Number(odd.PointSpreadAwayLine) || 0,\n\t\t\t\t\t\t\t\t\t\ttotalNumber: Number(odd.TotalNumber) || 0,\n\t\t\t\t\t\t\t\t\t\toverLine: Number(odd.OverLine) || 0,\n\t\t\t\t\t\t\t\t\t\tunderLine: Number(odd.UnderLine) || 0,\n\t\t\t\t\t\t\t\t\t\tdrawLine: Number(odd.DrawLine) || 0\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tupdatedAt: moment(),\n\t\t\t\t\t\t\t\t\texpireAt: moment.utc(event.MatchTime)\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tconst checkOddPoints = _.pick(newEventOdd.odds, [\n\t\t\t\t\t\t\t\t\t'moneyLineHome', \n\t\t\t\t\t\t\t\t\t'moneyLineAway', \n\t\t\t\t\t\t\t\t\t'pointSpreadHome',\n\t\t\t\t\t\t\t\t\t'pointSpreadAway',\n\t\t\t\t\t\t\t\t\t'pointSpreadHomeLine',\n\t\t\t\t\t\t\t\t\t'pointSpreadAwayLine',\n\t\t\t\t\t\t\t\t\t'totalNumber',\n\t\t\t\t\t\t\t\t\t'overLine',\n\t\t\t\t\t\t\t\t\t'underLine',\n\t\t\t\t\t\t\t\t\t'drawLine'])\n\n\t\t\t\t\t\t\t\tconst allZero = Object.values(checkOddPoints).every(val => Number(val) === 0)\n\n\t\t\t\t\t\t\t\tif(!allZero){\n\t\t\t\t\t\t\t\t\tif(sportLeague.sport === 'Baseball'){\n\t\t\t\t\t\t\t\t\t\tnewEventOdd.team.homePitcher = event.HomePitcher || 'Action'\n\t\t\t\t\t\t\t\t\t\tnewEventOdd.team.awayPitcher = event.AwayPitcher || 'Action'\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif(sportLeague.sport !== 'Soccer'){\n\t\t\t\t\t\t\t\t\t\tnewEventOdd.league = sportLeague.league\n\t\t\t\t\t\t\t\t\t\tnewEventOdd.region = ''\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif(sportLeague.sport === 'Soccer'){\n\t\t\t\t\t\t\t\t\t\tif(event.hasOwnProperty('League')){\n\t\t\t\t\t\t\t\t\t\t\tif(event.League.hasOwnProperty('Name')){\n\t\t\t\t\t\t\t\t\t\t\t\tnewEventOdd.league = event.League.Name\n\t\t\t\t\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\t\t\t\t\tnewEventOdd.league = '-'\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\t\t\t\tnewEventOdd.league = '-'\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tnewEventOdd.region = event.DisplayRegion\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tnewEventOdd.uniqueId = `${newEventOdd.team.homeROT}_${newEventOdd.team.awayROT}_${newEventOdd.sport.replace(/\\s/g,'').toUpperCase()}_${newEventOdd.oddType.replace(/\\s/g,'').toUpperCase()}_${moment.utc(newEventOdd.matchTime).format('MMDDYYYY')}`\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tconst existedEventOdd = await EventOdd.findOne({ uniqueId: newEventOdd.uniqueId })\n\t\t\t\t\t\t\t\t\tif(_.isEmpty(existedEventOdd)){\n\t\t\t\t\t\t\t\t\t\tawait new EventOdd(newEventOdd).save()\n\t\t\t\t\t\t\t\t\t\tconsole.log(`saved ${newEventOdd.uniqueId}`)\n\t\t\t\t\t\t\t\t\t}else if(!moment(existedEventOdd.source.lastUpdated).isSame(moment(newEventOdd.source.lastUpdated).format())){\n\t\t\t\t\t\t\t\t\t\tawait EventOdd.findOneAndUpdate({ uniqueId: newEventOdd.uniqueId }, { $set: newEventOdd })\n\t\t\t\t\t\t\t\t\t\tconsole.log(`updated ${newEventOdd.uniqueId}`)\n\t\t\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\t\t\tconsole.log(`${newEventOdd.uniqueId} is up to date`)\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\treturn null\n\t\t\t\t\t\t\t})).catch(err => {  throw err })\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn null\n\t\t\t\t\t}))\n\n\t\t\t\t}else{\n\t\t\t\t\tconsole.log(`jsonOdd ${sportLeague.league} has no event`)\n\t\t\t\t}\n\t\t\t\treturn null\n\t\t\t}))\n\t\t}\n\t\t\n\t}catch(err){\n\t\tthrow err\n\t}\n}\n\nexport default fetch_jsonOdd_eventOdds"]}