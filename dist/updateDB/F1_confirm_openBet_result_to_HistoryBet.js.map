{"version":3,"sources":["../../src/updateDB/F1_confirm_openBet_result_to_HistoryBet.js"],"names":["confirm_OpenBet_result_to_HistoryBet","find","openBets","isEmpty","next","Promise","all","map","openBet","eventsHaveWon","some","eventOdds","status","eventsHaveLost","eventsHaveWonHalf","eventsHaveLostHalf","eventsHavePush","eventsHavePostponed","eventsHaveCanceled","eventsHaveReview","eventsHavePending","allEventsWon","every","event","allEventsLost","allEventsWonHalf","allEventsLostHalf","allEventsPush","allEventsCanceled","allEventsPostponed","allEventsReview","allEventsPending","betOrderStatus","resultAmount","wagerDetail","winAmount","riskAmount","toFixed","orderType","parlayPoint","compact","betDetail","oddLine","Math","abs","riskPoint","reduce","a","b","newHistoryBet","orderNumber","owner","createdAt","closedAt","save","console","log","findOneAndRemove","_id","JSON","parse","stringify","player","then","playerIds","playerIdArr","Set","playerId","catch","err"],"mappings":"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","file":"F1_confirm_openBet_result_to_HistoryBet.js","sourcesContent":["import moment from 'moment';\nimport _ from 'lodash';\nimport Player from '../models/Player';\n\nimport { OpenBet, HistoryBet } from '../models/BetOrder';\n\nimport updatePlayerStatusAfterOrder from './utils/updatePlayerStatusAfterOrder';\n\nconst confirm_OpenBet_result_to_HistoryBet = async () => {\n\n\ttry{\n\t\tconst openBets = await OpenBet.find({})\n\t\tif(_.isEmpty(openBets)){\n\t\t\tnext()\n\t\t}\n\n\t\tawait Promise.all(openBets.map(async openBet => {\n\n\t\t\tconst eventsHaveWon       = _.some(openBet.eventOdds, { status: 'Won' })\n\t\t\tconst eventsHaveLost      = _.some(openBet.eventOdds, { status: 'Lost' })\n\t\t\tconst eventsHaveWonHalf   = _.some(openBet.eventOdds, { status: 'Won Half' })\n\t\t\tconst eventsHaveLostHalf  = _.some(openBet.eventOdds, { status: 'Lost Half' })\n\t\t\tconst eventsHavePush      = _.some(openBet.eventOdds, { status: 'Push' })\n\t\t\tconst eventsHavePostponed = _.some(openBet.eventOdds, { status: 'Postponed' })\n\t\t\tconst eventsHaveCanceled  = _.some(openBet.eventOdds, { status: 'Canceled' })\n\t\t\tconst eventsHaveReview    = _.some(openBet.eventOdds, { status: 'Review' })\n\t\t\tconst eventsHavePending   = _.some(openBet.eventOdds, { status: 'Pending' })\n\t\n\t\t\tconst allEventsWon        = openBet.eventOdds.every(event => event.status === 'Won')\n\t\t\tconst allEventsLost       = openBet.eventOdds.every(event => event.status === 'Lost')\n\t\t\tconst allEventsWonHalf    = openBet.eventOdds.every(event => event.status === 'Won Half')\n\t\t\tconst allEventsLostHalf   = openBet.eventOdds.every(event => event.status === 'Lost Half')\n\t\t\tconst allEventsPush       = openBet.eventOdds.every(event => event.status === 'Push')\n\t\t\tconst allEventsCanceled   = openBet.eventOdds.every(event => event.status === 'Canceled')\n\t\t\tconst allEventsPostponed  = openBet.eventOdds.every(event => event.status === 'Postponed')\n\t\t\tconst allEventsReview     = openBet.eventOdds.every(event => event.status === 'Review')\n\t\t\tconst allEventsPending    = openBet.eventOdds.every(event => event.status === 'Pending')\n\n\t\t\tlet betOrderStatus = 'TBD'\n\t\t\tlet resultAmount = 0\n\t\n\t\t\t// dont know why switch() doesn't working here with array every boolean\n\t\t\tif(allEventsWon){\n\t\t\t\tbetOrderStatus = 'Won'\n\t\t\t\tresultAmount = openBet.wagerDetail.winAmount\n\t\t\t}else if(allEventsLost){\n\t\t\t\tbetOrderStatus = 'Lost'\n\t\t\t\tresultAmount = -openBet.wagerDetail.riskAmount\n\t\t\t}else if(allEventsWonHalf){\n\t\t\t\tbetOrderStatus = 'Won Half'\n\t\t\t\tresultAmount = ( openBet.wagerDetail.winAmount / 2 ).toFixed()\n\t\t\t}else if(allEventsLostHalf){\n\t\t\t\tbetOrderStatus = 'Lost Half'\n\t\t\t\tresultAmount = -( openBet.wagerDetail.riskAmount / 2 ).toFixed()\n\t\t\t}else if(allEventsPush){\n\t\t\t\tbetOrderStatus = 'Push'\n\t\t\t\tresultAmount = 0\n\t\t\t}else if(allEventsCanceled){\n\t\t\t\tbetOrderStatus = 'Canceled'\n\t\t\t\tresultAmount = 0\n\t\t\t}else if(allEventsPostponed){\n\t\t\t\tbetOrderStatus = 'Postponed'\n\t\t\t\tresultAmount = 0\n\t\t\t}else{\n\t\t\t\tbetOrderStatus = 'TBD'\n\t\t\t\tresultAmount = 0\n\t\t\t}\n\n\t\t\tif(openBet.orderType === 'Parlay'){\n\t\t\t\tswitch(true){\n\t\t\t\t\tcase eventsHaveLost:\n\t\t\t\t\t\tbetOrderStatus = 'Lost'\n\t\t\t\t\t\tresultAmount = -openBet.wagerDetail.riskAmount\n\t\t\t\t\t\topenBet.eventOdds.map(event => {\n\t\t\t\t\t\t\tif(event.status !== 'Lost'){\n\t\t\t\t\t\t\t\tevent.status = 'Closed'\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn event\n\t\t\t\t\t\t})\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase eventsHaveWon && !eventsHaveLost && !eventsHaveReview && !eventsHavePending:\n\t\t\t\t\t\tconst parlayPoint = _.compact(openBet.eventOdds.map(event => {\n\t\t\t\t\t\t\tif(event.status === 'Won'){\n\t\t\t\t\t\t\t\tif(event.betDetail.oddLine > 0){\n\t\t\t\t\t\t\t\t\treturn (event.betDetail.oddLine + 100) / 100\n\t\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\t\treturn (Math.abs(event.betDetail.oddLine) + 100) / Math.abs(event.betDetail.oddLine)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn null\n\t\t\t\t\t\t}))\n\t\t\t\t\t\tconst riskPoint = parlayPoint.reduce((a, b) => a * b)\n\t\t\t\t\t\tresultAmount = ((openBet.wagerDetail.riskAmount * riskPoint - openBet.wagerDetail.riskAmount) * 1).toFixed()\n\t\t\t\t\t\tbetOrderStatus = 'Won'\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn;\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tif(betOrderStatus !== 'TBD'){\n\t\t\t\tconst newHistoryBet = new HistoryBet({\n\t\t\t\t\torderNumber: openBet.orderNumber,\n\t\t\t\t\torderType: openBet.orderType,\n\t\t\t\t\towner: openBet.owner,\n\t\t\t\t\twagerDetail: openBet.wagerDetail,\n\t\t\t\t\tstatus: betOrderStatus,\n\t\t\t\t\tresultAmount: resultAmount,\n\t\t\t\t\teventOdds: openBet.eventOdds,\n\t\t\t\t\tcreatedAt: openBet.createdAt,\n\t\t\t\t\tclosedAt: moment()\n\t\t\t\t})\n\t\n\t\t\t\tawait newHistoryBet.save()\n\t\t\t\tconsole.log('saved history bet' + newHistoryBet.orderNumber)\n\t\t\t\tawait OpenBet.findOneAndRemove({ _id: openBet._id })\n\t\t\t\tconsole.log('deleted openbet ' + openBet.orderNumber)\n\t\t\t\treturn JSON.parse(JSON.stringify(openBet.owner.player))\n\n\t\t\t}else{\n\t\t\t\tconsole.log(openBet.orderNumber + ' not finished')\n\t\t\t}\n\n\t\t\treturn null\n\t\n\t\t})).then(async (playerIds) => {\n\t\t\tconst playerIdArr = _.compact([ ...new Set(playerIds) ])\n\t\t\tif(!_.isEmpty(playerIdArr)){\n\t\t\t\tconsole.log('update following players')\n\t\t\t\tconsole.log(playerIdArr)\n\t\t\t\tawait Promise.all(playerIdArr.map(async playerId => {\n\t\t\t\t\tawait updatePlayerStatusAfterOrder(playerId)\n\t\t\t\t\tconsole.log('updated' + playerId)\n\t\t\t\t\treturn null\n\t\t\t\t})).catch(err => { throw err })\n\t\t\t}else{\n\t\t\t\tconsole.log('no players need to update')\n\t\t\t}\n\t\t}).catch(err => { throw err })\n\n\t}catch(err){\n\t\tthrow err\n\t}\n\n}\n\nexport default confirm_OpenBet_result_to_HistoryBet"]}