{"version":3,"sources":["../../src/updateDB/F1_confirm_openBet_result_to_HistoryBet.js"],"names":["confirm_OpenBet_result_to_HistoryBet","find","openBets","isEmpty","next","Promise","all","map","openBet","orderType","straightBetResult","JSON","parse","stringify","owner","player","parlayBetResult","teaserBetResult","reverseBetResult","then","playerIds","playerIdArr","compact","Set","console","log","playerId","catch","err"],"mappings":"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":"F1_confirm_openBet_result_to_HistoryBet.js","sourcesContent":["import moment from 'moment';\nimport _ from 'lodash';\nimport Player from '../models/Player';\n\nimport { OpenBet, HistoryBet } from '../models/BetOrder';\n\nimport updatePlayerStatusAfterOrder from './updateUser/updatePlayerStatusAfterOrder';\n\nimport confirmResultStraight from './confirmOrderTypeResult/confirmResultStraight'\nimport confirmResultParlay from './confirmOrderTypeResult/confirmResultParlay'\nimport confirmResultTeaser from './confirmOrderTypeResult/confirmResultTeaser'\nimport confirmResultReverse from './confirmOrderTypeResult/confirmResultReverse'\n\nconst confirm_OpenBet_result_to_HistoryBet = async () => {\n\n\ttry{\n\t\tconst openBets = await OpenBet.find({})\n\t\tif(_.isEmpty(openBets)){\n\t\t\tnext()\n\t\t}\n\n\t\tawait Promise.all(openBets.map(async openBet => {\n\n\t\t\tswitch(openBet.orderType){\n\t\t\t\tcase 'Straight':\n\t\t\t\t\tconst straightBetResult = await confirmResultStraight(openBet)\n\t\t\t\t\tif(straightBetResult === true){\n\t\t\t\t\t\treturn JSON.parse(JSON.stringify(openBet.owner.player))\n\t\t\t\t\t}else{\n\t\t\t\t\t\treturn null\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Parlay':\n\t\t\t\t\tconst parlayBetResult = await confirmResultParlay(openBet)\n\t\t\t\t\tif(parlayBetResult === true){\n\t\t\t\t\t\treturn JSON.parse(JSON.stringify(openBet.owner.player))\n\t\t\t\t\t}else{\n\t\t\t\t\t\treturn null\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Teaser6040':\n\t\t\t\tcase 'Teaser6545':\n\t\t\t\tcase 'Teaser7050':\n\t\t\t\tcase 'SuperTeaser':\n\t\t\t\t\tconst teaserBetResult = await confirmResultTeaser(openBet)\n\t\t\t\t\tif(teaserBetResult === true){\n\t\t\t\t\t\treturn JSON.parse(JSON.stringify(openBet.owner.player))\n\t\t\t\t\t}else{\n\t\t\t\t\t\treturn null\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'WinReverse':\n\t\t\t\tcase 'ActionReverse':\n\t\t\t\t\tconst reverseBetResult = await confirmResultReverse(openBet)\n\t\t\t\t\tif(reverseBetResult === true){\n\t\t\t\t\t\treturn JSON.parse(JSON.stringify(openBet.owner.player))\n\t\t\t\t\t}else{\n\t\t\t\t\t\treturn null\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\treturn null\n\t\t\t}\n\n\t\t})).then(async (playerIds) => {\n\t\t\tconst playerIdArr = _.compact([ ...new Set(playerIds) ])\n\t\t\tif(!_.isEmpty(playerIdArr)){\n\t\t\t\tconsole.log('update following players')\n\t\t\t\tconsole.log(playerIdArr)\n\t\t\t\tawait Promise.all(playerIdArr.map(async playerId => {\n\t\t\t\t\tawait updatePlayerStatusAfterOrder(playerId)\n\t\t\t\t\tconsole.log('updated' + playerId)\n\t\t\t\t\treturn null\n\t\t\t\t})).catch(err => { throw err })\n\t\t\t}else{\n\t\t\t\tconsole.log('no players need to update')\n\t\t\t}\n\t\t}).catch(err => { throw err })\n\n\t}catch(err){\n\t\tthrow err\n\t}\n\n}\n\nexport default confirm_OpenBet_result_to_HistoryBet\n\n\n\n// import moment from 'moment';\n// import _ from 'lodash';\n// import Player from '../models/Player';\n\n// import { OpenBet, HistoryBet } from '../models/BetOrder';\n\n// import updatePlayerStatusAfterOrder from './utils/updatePlayerStatusAfterOrder';\n\n// const confirm_OpenBet_result_to_HistoryBet = async () => {\n\n// \ttry{\n// \t\tconst openBets = await OpenBet.find({})\n// \t\tif(_.isEmpty(openBets)){\n// \t\t\tnext()\n// \t\t}\n\n// \t\tawait Promise.all(openBets.map(async openBet => {\n\n// \t\t\tconst eventsHaveWon       = _.some(openBet.eventOdds, { status: 'Won' })\n// \t\t\tconst eventsHaveLost      = _.some(openBet.eventOdds, { status: 'Lost' })\n// \t\t\tconst eventsHaveWonHalf   = _.some(openBet.eventOdds, { status: 'Won Half' })\n// \t\t\tconst eventsHaveLostHalf  = _.some(openBet.eventOdds, { status: 'Lost Half' })\n// \t\t\tconst eventsHavePush      = _.some(openBet.eventOdds, { status: 'Push' })\n// \t\t\tconst eventsHavePostponed = _.some(openBet.eventOdds, { status: 'Postponed' })\n// \t\t\tconst eventsHaveCanceled  = _.some(openBet.eventOdds, { status: 'Canceled' })\n// \t\t\tconst eventsHaveReview    = _.some(openBet.eventOdds, { status: 'Review' })\n// \t\t\tconst eventsHavePending   = _.some(openBet.eventOdds, { status: 'Pending' })\n\t\n// \t\t\tconst allEventsWon        = openBet.eventOdds.every(event => event.status === 'Won')\n// \t\t\tconst allEventsLost       = openBet.eventOdds.every(event => event.status === 'Lost')\n// \t\t\tconst allEventsWonHalf    = openBet.eventOdds.every(event => event.status === 'Won Half')\n// \t\t\tconst allEventsLostHalf   = openBet.eventOdds.every(event => event.status === 'Lost Half')\n// \t\t\tconst allEventsPush       = openBet.eventOdds.every(event => event.status === 'Push')\n// \t\t\tconst allEventsCanceled   = openBet.eventOdds.every(event => event.status === 'Canceled')\n// \t\t\tconst allEventsPostponed  = openBet.eventOdds.every(event => event.status === 'Postponed')\n// \t\t\tconst allEventsReview     = openBet.eventOdds.every(event => event.status === 'Review')\n// \t\t\tconst allEventsPending    = openBet.eventOdds.every(event => event.status === 'Pending')\n\n// \t\t\tlet betOrderStatus = 'TBD'\n// \t\t\tlet resultAmount = 0\n\t\n// \t\t\t// dont know why switch() doesn't working here with array every boolean\n// \t\t\tif(allEventsWon){\n// \t\t\t\tbetOrderStatus = 'Won'\n// \t\t\t\tresultAmount = openBet.wagerDetail.winAmount\n// \t\t\t}else if(allEventsLost){\n// \t\t\t\tbetOrderStatus = 'Lost'\n// \t\t\t\tresultAmount = -openBet.wagerDetail.riskAmount\n// \t\t\t}else if(allEventsWonHalf){\n// \t\t\t\tbetOrderStatus = 'Won Half'\n// \t\t\t\tresultAmount = ( openBet.wagerDetail.winAmount / 2 ).toFixed()\n// \t\t\t}else if(allEventsLostHalf){\n// \t\t\t\tbetOrderStatus = 'Lost Half'\n// \t\t\t\tresultAmount = -( openBet.wagerDetail.riskAmount / 2 ).toFixed()\n// \t\t\t}else if(allEventsPush){\n// \t\t\t\tbetOrderStatus = 'Push'\n// \t\t\t\tresultAmount = 0\n// \t\t\t}else if(allEventsCanceled){\n// \t\t\t\tbetOrderStatus = 'Canceled'\n// \t\t\t\tresultAmount = 0\n// \t\t\t}else if(allEventsPostponed){\n// \t\t\t\tbetOrderStatus = 'Postponed'\n// \t\t\t\tresultAmount = 0\n// \t\t\t}else{\n// \t\t\t\tbetOrderStatus = 'TBD'\n// \t\t\t\tresultAmount = 0\n// \t\t\t}\n\n// \t\t\tif(openBet.orderType === 'Parlay'){\n// \t\t\t\tswitch(true){\n// \t\t\t\t\tcase eventsHaveLost:\n// \t\t\t\t\t\tbetOrderStatus = 'Lost'\n// \t\t\t\t\t\tresultAmount = -openBet.wagerDetail.riskAmount\n// \t\t\t\t\t\topenBet.eventOdds.map(event => {\n// \t\t\t\t\t\t\tif(event.status !== 'Lost'){\n// \t\t\t\t\t\t\t\tevent.status = 'Closed'\n// \t\t\t\t\t\t\t}\n// \t\t\t\t\t\t\treturn event\n// \t\t\t\t\t\t})\n// \t\t\t\t\t\tbreak;\n// \t\t\t\t\tcase eventsHaveWon && !eventsHaveLost && !eventsHaveReview && !eventsHavePending:\n// \t\t\t\t\t\tconst parlayPoint = _.compact(openBet.eventOdds.map(event => {\n// \t\t\t\t\t\t\tif(event.status === 'Won'){\n// \t\t\t\t\t\t\t\tif(event.betDetail.oddLine > 0){\n// \t\t\t\t\t\t\t\t\treturn (event.betDetail.oddLine + 100) / 100\n// \t\t\t\t\t\t\t\t}else{\n// \t\t\t\t\t\t\t\t\treturn (Math.abs(event.betDetail.oddLine) + 100) / Math.abs(event.betDetail.oddLine)\n// \t\t\t\t\t\t\t\t}\n// \t\t\t\t\t\t\t}\n// \t\t\t\t\t\t\treturn null\n// \t\t\t\t\t\t}))\n// \t\t\t\t\t\tconst riskPoint = parlayPoint.reduce((a, b) => a * b)\n// \t\t\t\t\t\tresultAmount = ((openBet.wagerDetail.riskAmount * riskPoint - openBet.wagerDetail.riskAmount) * 1).toFixed()\n// \t\t\t\t\t\tbetOrderStatus = 'Won'\n// \t\t\t\t\t\tbreak;\n// \t\t\t\t\tdefault:\n// \t\t\t\t\t\treturn;\n// \t\t\t\t}\n\t\n// \t\t\t}\n\t\n// \t\t\tif(betOrderStatus !== 'TBD'){\n// \t\t\t\tconst newHistoryBet = new HistoryBet({\n// \t\t\t\t\torderNumber: openBet.orderNumber,\n// \t\t\t\t\torderType: openBet.orderType,\n// \t\t\t\t\towner: openBet.owner,\n// \t\t\t\t\twagerDetail: openBet.wagerDetail,\n// \t\t\t\t\tstatus: betOrderStatus,\n// \t\t\t\t\tresultAmount: resultAmount,\n// \t\t\t\t\teventOdds: openBet.eventOdds,\n// \t\t\t\t\tcreatedAt: openBet.createdAt,\n// \t\t\t\t\tclosedAt: moment()\n// \t\t\t\t})\n\t\n// \t\t\t\tawait newHistoryBet.save()\n// \t\t\t\tconsole.log('saved history bet' + newHistoryBet.orderNumber)\n// \t\t\t\tawait OpenBet.findOneAndRemove({ _id: openBet._id })\n// \t\t\t\tconsole.log('deleted openbet ' + openBet.orderNumber)\n// \t\t\t\treturn JSON.parse(JSON.stringify(openBet.owner.player))\n\n// \t\t\t}else{\n// \t\t\t\tconsole.log(openBet.orderNumber + ' not finished')\n// \t\t\t\treturn null\n// \t\t\t}\n\t\n// \t\t})).then(async (playerIds) => {\n// \t\t\tconst playerIdArr = _.compact([ ...new Set(playerIds) ])\n// \t\t\tif(!_.isEmpty(playerIdArr)){\n// \t\t\t\tconsole.log('update following players')\n// \t\t\t\tconsole.log(playerIdArr)\n// \t\t\t\tawait Promise.all(playerIdArr.map(async playerId => {\n// \t\t\t\t\tawait updatePlayerStatusAfterOrder(playerId)\n// \t\t\t\t\tconsole.log('updated' + playerId)\n// \t\t\t\t\treturn null\n// \t\t\t\t})).catch(err => { throw err })\n// \t\t\t}else{\n// \t\t\t\tconsole.log('no players need to update')\n// \t\t\t}\n// \t\t}).catch(err => { throw err })\n\n// \t}catch(err){\n// \t\tthrow err\n// \t}\n\n// }\n\n// export default confirm_OpenBet_result_to_HistoryBet"]}