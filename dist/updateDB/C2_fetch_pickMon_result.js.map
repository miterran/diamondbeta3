{"version":3,"sources":["../../src/updateDB/C2_fetch_pickMon_result.js"],"names":["fetch_pickMon_result","findOne","provider","activate","pickMonApi","find","openBets","openBetPickMonEvents","compact","uniqBy","concat","apply","map","openBet","eventOdds","event","status","source","isAfter","cutOffTime","sportLeague","sport","toLowerCase","league","pick","pickMonSportLeagues","join","console","log","isEmpty","get","apiLink","pickMon_UID","pickMon_Key","option","resultFullCall","response","data","explicitArray","pickMonData","lines","game","isFunction","Promise","all","line","score","winner","openBetEvent","id","newResult","uniqueId","eventResultId","eventOddId","oddType","region","details","matchTime","team","homeScore","team1","awayScore","team2","expireAt","add","void","note","existedResult","save"],"mappings":"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","file":"C2_fetch_pickMon_result.js","sourcesContent":["import config from '../config'\nimport Provider from '../models/Provider';\nimport { EventOdd, Result } from '../models/EventOdd';\nimport { OpenBet } from '../models/BetOrder';\nimport _ from 'lodash'\nimport moment from 'moment'\nimport axios from 'axios'\nimport xml2js from'xml2js-es6-promise'\n\n\nconst fetch_pickMon_result = async () => {\n// \tget open bet unique id with pickMon\n\tconst pickMonApi = await Provider.findOne({ provider: 'pickMon', activate: true })\n\n\tif(pickMonApi){\n\n\t\tconst openBets = await OpenBet.find({})\n\t\tconst openBetPickMonEvents = _.compact(_.uniqBy([].concat.apply([], openBets.map(openBet => {\n\t\t\treturn openBet.eventOdds.map(event => {\n\t\t\t\tif(event.status === 'Pending' && event.source.provider === 'pickMon' && moment().isAfter(event.cutOffTime) ){\n\t\t\t\t\tevent.sportLeague = `${event.sport.toLowerCase()}-${event.league.toLowerCase()}`\n\t\t\t\t\treturn _.pick(event, ['eventOddId', 'sport', 'matchTime', 'details', 'league', 'region', 'status', 'team', 'source', 'oddType', 'sportLeague'])\n\t\t\t\t}\n\t\t\t\treturn null\n\t\t\t})\n\t\t})), 'sportLeague'))\n\n\t\tconst pickMonSportLeagues = openBetPickMonEvents.map(event => event.sportLeague).join(',')\n\t\tconsole.log('fetch pickmon result' + pickMonSportLeagues)\n\n\t\tif(!_.isEmpty(pickMonSportLeagues)){\n\t\t\tconst response = await axios.get(`${pickMonApi.apiLink}uid=${config.pickMon_UID}&key=${config.pickMon_Key}&sports=${pickMonSportLeagues}&graded=1&full_call=${pickMonApi.option.resultFullCall}`)\n\t\t\tif(!_.isEmpty(response.data)){\n\t\t\t\tconst pickMonData = await xml2js(response.data, {explicitArray: false})\n\t\t\t\tif(!_.isEmpty(pickMonData.lines) && !_.isEmpty(pickMonData.lines.game) && _.isFunction(pickMonData.lines.game.map)){\n\t\t\t\t\tawait Promise.all(pickMonData.lines.game.map(async event => {\n\n\t\t\t\t \t\tif( event.line.score.winner ){ // only when event is officially finished // save result\n\t\t\t\t \t\t\tawait Promise.all(openBetPickMonEvents.map(async openBetEvent =>{\n\n\t\t\t\t \t\t\t\tif(event.id === openBetEvent.source.id){\n\t\t\t\t \t\t\t\t\tconsole.log('checkhere pickmond result')\n\t\t\t\t\t\t\t\t\tconst newResult = {\n\t\t\t\t\t\t\t\t\t\tuniqueId: openBetEvent.uniqueId,\n\t\t\t\t\t\t\t\t\t\teventResultId: openBetEvent.eventOddId,\n\t\t\t\t\t\t\t\t\t\tsource: {\n\t\t\t\t\t\t\t\t\t\t\tprovider: 'pickMon',\n\t\t\t\t\t\t\t\t\t\t\tid: openBetEvent.source.id,\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\tsport: openBetEvent.sport,\n\t\t\t\t\t\t\t\t\t\toddType: openBetEvent.oddType,\n\t\t\t\t\t\t\t\t\t\tleague: openBetEvent.league,\n\t\t\t\t\t\t\t\t\t\tregion: openBetEvent.region,\n\t\t\t\t\t\t\t\t\t\tdetails: openBetEvent.details,\n\t\t\t\t\t\t\t\t\t\tmatchTime: openBetEvent.matchTime,\n\t\t\t\t\t\t\t\t\t\tteam: openBetEvent.team,\n\t\t\t\t\t\t\t\t\t\tscore:{\n\t\t\t\t\t\t\t\t\t\t\thomeScore: event.line.score.team1 || 0,\n\t\t\t\t\t\t\t\t\t\t\tawayScore: event.line.score.team2 || 0\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\texpireAt: moment().add(3, 'd')\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t \t\t\t\t\tswitch(event.void){\n\t\t\t\t \t\t\t\t\t\tcase '0':\n\t\t\t\t \t\t\t\t\t\t\tnewResult.status = 'Finished'\n\t\t\t\t \t\t\t\t\t\t\tbreak;\n\t\t\t\t \t\t\t\t\t\t// case '1':\n\t\t\t\t \t\t\t\t\t\t// \tnewResult.status = 'Canceled'\n\t\t\t\t \t\t\t\t\t\t// \tnewResult.note = 'pm showed void = 1'\n\t\t\t\t \t\t\t\t\t\t// \tbreak;\n\t\t\t\t \t\t\t\t\t\tdefault:\n\t\t\t\t \t\t\t\t\t\t\tnewResult.status = 'Review'\n\t\t\t\t \t\t\t\t\t\t\tnewResult.note = 'Server Reviewing... TBD, pm void ' + event.void\n\t\t\t\t \t\t\t\t\t\t\treturn\n\t\t\t\t \t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tconst existedResult = await Result.findOne({ uniqueId: openBetEvent.uniqueId })\n\t\t\t\t\t\t\t\t\tif(_.isEmpty(existedResult)){\n\t\t\t\t\t\t\t\t\t\tawait new Result(newResult).save()\n\t\t\t\t\t\t\t\t\t\tconsole.log('saved pickMon new result ' + openBetEvent.uniqueId)\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t \t\t\t\t}\n\t\t\t\t \t\t\t\treturn null\n\n\t\t\t\t \t\t\t}))\n\t\t\t\t \t\t}\n\t\t\t\t \t\treturn null\n\t\t\t\t\t}))\n\t\t\t\t}\n\t\t\t}\n\t\t}else{\n\t\t\tconsole.log('use open bet event id to update pickmon result, but open bet empty')\n\t\t}\n\n\t}\n\n}\n\nexport default fetch_pickMon_result\n\n"]}