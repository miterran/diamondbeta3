{"version":3,"sources":["../../src/updateDB/C2_fetch_pickMon_result.js"],"names":["fetch_pickMon_result","findOne","provider","activate","pickMonApi","find","openBets","openBetPickMon","compact","uniqBy","concat","apply","map","openBet","eventOdds","event","status","source","isAfter","cutOffTime","sport","league","sportLeague","toLowerCase","pick","pickMonSportLeagues","pickMonSportLeague","join","isEmpty","get","apiLink","pickMon_UID","pickMon_Key","option","resultFullCall","response","data","explicitArray","pickMonData","lines","game","isFunction","Promise","all","line","score","winner","openBetEvent","id","newResult","uniqueId","oddType","region","details","matchTime","team","homeScore","team2","awayScore","team1","expireAt","add","void","note","existedResult","save","console","log"],"mappings":"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","file":"C2_fetch_pickMon_result.js","sourcesContent":["import config from '../config'\nimport Provider from '../models/Provider';\nimport { EventOdd, Result } from '../models/EventOdd';\nimport { OpenBet } from '../models/BetOrder';\nimport _ from 'lodash'\nimport moment from 'moment'\nimport axios from 'axios'\nimport xml2js from'xml2js-es6-promise'\n\n\nconst fetch_pickMon_result = async () => {\n\ttry{\n\n\t\tconst pickMonApi = await Provider.findOne({ provider: 'pickMon', activate: true })\n\t\tif(pickMonApi){\n\t\t\tconst openBets = await OpenBet.find({})\n\t\t\tconst openBetPickMon = _.compact(_.uniqBy([].concat.apply([], openBets.map(openBet => {\n\t\t\t\treturn openBet.eventOdds.map(event => {\n\t\t\t\t\tif(event.status === 'Pending' && event.source.provider === 'pickMon' && moment().isAfter(event.cutOffTime) ){\n\n\t\t\t\t\t\tif(event.sport === 'Football' && event.league === 'College'){\n\t\t\t\t\t\t\tevent.sportLeague = `${event.sport.toLowerCase()}-ncaa`\n\t\t\t\t\t\t}else if(event.sport === 'Soccer'){\n\t\t\t\t\t\t\tevent.sportLeague = 'soccer'\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\tevent.sportLeague = `${event.sport.toLowerCase()}-${event.league.toLowerCase()}`\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn _.pick(event, ['uniqueId', 'sport', 'matchTime', 'details', 'league', 'region', 'status', 'team', 'source', 'oddType', 'sportLeague'])\n\t\t\t\t\t}\n\t\t\t\t\treturn null\n\t\t\t\t})\n\t\t\t})), 'uniqueId'))\n\t\t\tconst pickMonSportLeagues = _.uniqBy(openBetPickMon, 'sportLeague').map(pickMonSportLeague => pickMonSportLeague.sportLeague).join(',')\n\n\n\t\t\tif(!_.isEmpty(pickMonSportLeagues)){\n\t\t\t\tconst response = await axios.get(`${pickMonApi.apiLink}uid=${config.pickMon_UID}&key=${config.pickMon_Key}&sports=${pickMonSportLeagues}&graded=1&full_call=${pickMonApi.option.resultFullCall}`)\n\t\t\t\tif(!_.isEmpty(response.data)){\n\t\t\t\t\tconst pickMonData = await xml2js(response.data, {explicitArray: false})\n\t\t\t\t\tif(!_.isEmpty(pickMonData.lines) && !_.isEmpty(pickMonData.lines.game) && _.isFunction(pickMonData.lines.game.map)){\n\t\t\t\t\t\tawait Promise.all(pickMonData.lines.game.map(async event => {\n\n\t\t\t\t\t \t\tif( event.line.score.winner ){ // only when event is officially finished // save result\n\t\t\t\t\t \t\t\tawait Promise.all(openBetPickMon.map(async openBetEvent =>{\n\n\t\t\t\t\t \t\t\t\tif(event.id === openBetEvent.source.id){\n\t\t\t\t\t\t\t\t\t\tconst newResult = {\n\t\t\t\t\t\t\t\t\t\t\tuniqueId: openBetEvent.uniqueId,\n\t\t\t\t\t\t\t\t\t\t\tsource: {\n\t\t\t\t\t\t\t\t\t\t\t\tprovider: 'pickMon',\n\t\t\t\t\t\t\t\t\t\t\t\tid: openBetEvent.source.id,\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\tsport: openBetEvent.sport,\n\t\t\t\t\t\t\t\t\t\t\toddType: openBetEvent.oddType,\n\t\t\t\t\t\t\t\t\t\t\tleague: openBetEvent.league,\n\t\t\t\t\t\t\t\t\t\t\tregion: openBetEvent.region,\n\t\t\t\t\t\t\t\t\t\t\tdetails: openBetEvent.details,\n\t\t\t\t\t\t\t\t\t\t\tmatchTime: openBetEvent.matchTime,\n\t\t\t\t\t\t\t\t\t\t\tteam: openBetEvent.team,\n\t\t\t\t\t\t\t\t\t\t\tscore:{\n\t\t\t\t\t\t\t\t\t\t\t\thomeScore: event.line.score.team2 || 0,\n\t\t\t\t\t\t\t\t\t\t\t\tawayScore: event.line.score.team1 || 0\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\texpireAt: moment().add(3, 'd')\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t \t\t\t\t\tswitch(event.void){\n\t\t\t\t\t \t\t\t\t\t\tcase '0':\n\t\t\t\t\t \t\t\t\t\t\t\tnewResult.status = 'Finished'\n\t\t\t\t\t \t\t\t\t\t\t\tbreak;\n\t\t\t\t\t \t\t\t\t\t\t// case '1':\n\t\t\t\t\t \t\t\t\t\t\t// \tnewResult.status = 'Canceled'\n\t\t\t\t\t \t\t\t\t\t\t// \tnewResult.note = 'pm showed void = 1'\n\t\t\t\t\t \t\t\t\t\t\t// \tbreak;\n\t\t\t\t\t \t\t\t\t\t\tdefault:\n\t\t\t\t\t \t\t\t\t\t\t\tnewResult.status = 'Review'\n\t\t\t\t\t \t\t\t\t\t\t\tnewResult.note = 'Server Reviewing... TBD, pm void ' + event.void\n\t\t\t\t\t \t\t\t\t\t\t\treturn\n\t\t\t\t\t \t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tconst existedResult = await Result.findOne({ uniqueId: openBetEvent.uniqueId })\n\t\t\t\t\t\t\t\t\t\tif(_.isEmpty(existedResult)){\n\t\t\t\t\t\t\t\t\t\t\tawait new Result(newResult).save()\n\t\t\t\t\t\t\t\t\t\t\tconsole.log('saved pickMon new result ' + openBetEvent.uniqueId)\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t \t\t\t\t}\n\t\t\t\t\t \t\t\t\treturn null\n\n\t\t\t\t\t \t\t\t}))\n\t\t\t\t\t \t\t}\n\t\t\t\t\t \t\treturn null\n\t\t\t\t\t\t}))\n\t\t\t\t\t}\n\t\t\t\t}else{\n\t\t\t\t\tconsole.log('response.empty')\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\tconsole.log('use open bet event id to update pickmon result, but open bet empty')\n\t\t\t}\n\t\t}\n\n\t}catch(err){\n\t\tthrow err\n\t}\n\n}\n\nexport default fetch_pickMon_result\n\n"]}