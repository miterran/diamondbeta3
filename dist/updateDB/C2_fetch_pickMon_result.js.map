{"version":3,"sources":["../../src/updateDB/C2_fetch_pickMon_result.js"],"names":["fetch_pickMon_result","findOne","provider","activate","pickMonApi","find","openBets","openBetPickMon","compact","uniqBy","concat","apply","map","openBet","eventOdds","event","status","source","isAfter","cutOffTime","sport","league","sportLeague","toLowerCase","pick","pickMonSportLeagues","pickMonSportLeague","join","console","log","isEmpty","get","apiLink","pickMon_UID","pickMon_Key","option","resultFullCall","response","data","explicitArray","pickMonData","lines","game","isFunction","Promise","all","line","score","winner","openBetEvent","id","newResult","uniqueId","oddType","region","details","matchTime","team","homeScore","team1","awayScore","team2","expireAt","add","void","note","existedResult","save"],"mappings":"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","file":"C2_fetch_pickMon_result.js","sourcesContent":["import config from '../config'\nimport Provider from '../models/Provider';\nimport { EventOdd, Result } from '../models/EventOdd';\nimport { OpenBet } from '../models/BetOrder';\nimport _ from 'lodash'\nimport moment from 'moment'\nimport axios from 'axios'\nimport xml2js from'xml2js-es6-promise'\n\n\nconst fetch_pickMon_result = async () => {\n// \tget open bet unique id with pickMon\n\tconst pickMonApi = await Provider.findOne({ provider: 'pickMon', activate: true })\n\n\tif(pickMonApi){\n\n\t\tconst openBets = await OpenBet.find({})\n\t\tconst openBetPickMon = _.compact(_.uniqBy([].concat.apply([], openBets.map(openBet => {\n\t\t\treturn openBet.eventOdds.map(event => {\n\t\t\t\tif(event.status === 'Pending' && event.source.provider === 'pickMon' && moment().isAfter(event.cutOffTime) ){\n\t\t\t\t\tif(event.sport === 'Football' && event.league === 'College'){\n\t\t\t\t\t\tevent.sportLeague = `${event.sport.toLowerCase()}-ncaa`\n\t\t\t\t\t}else if(event.sport === 'Soccer'){\n\t\t\t\t\t\tevent.sportLeague = 'soccer'\n\t\t\t\t\t}else{\n\t\t\t\t\t\tevent.sportLeague = `${event.sport.toLowerCase()}-${event.league.toLowerCase()}`\n\t\t\t\t\t}\n\t\t\t\t\treturn _.pick(event, ['uniqueId', 'sport', 'matchTime', 'details', 'league', 'region', 'status', 'team', 'source', 'oddType', 'sportLeague'])\n\t\t\t\t}\n\t\t\t\treturn null\n\t\t\t})\n\t\t})), 'uniqueId'))\n\n\t\tconst pickMonSportLeagues = _.uniqBy(openBetPickMon, 'sportLeague').map(pickMonSportLeague => pickMonSportLeague.sportLeague).join(',')\n\n\t\tconsole.log(pickMonSportLeagues)\n\n\t\tif(!_.isEmpty(pickMonSportLeagues)){\n\t\t\tconst response = await axios.get(`${pickMonApi.apiLink}uid=${config.pickMon_UID}&key=${config.pickMon_Key}&sports=${pickMonSportLeagues}&graded=1&full_call=${pickMonApi.option.resultFullCall}`)\n\t\t\tif(!_.isEmpty(response.data)){\n\t\t\t\tconst pickMonData = await xml2js(response.data, {explicitArray: false})\n\t\t\t\tif(!_.isEmpty(pickMonData.lines) && !_.isEmpty(pickMonData.lines.game) && _.isFunction(pickMonData.lines.game.map)){\n\t\t\t\t\tawait Promise.all(pickMonData.lines.game.map(async event => {\n\n\t\t\t\t \t\tif( event.line.score.winner ){ // only when event is officially finished // save result\n\t\t\t\t \t\t\tawait Promise.all(openBetPickMon.map(async openBetEvent =>{\n\n\t\t\t\t \t\t\t\tif(event.id === openBetEvent.source.id){\n\t\t\t\t\t\t\t\t\tconst newResult = {\n\t\t\t\t\t\t\t\t\t\tuniqueId: openBetEvent.uniqueId,\n\t\t\t\t\t\t\t\t\t\tsource: {\n\t\t\t\t\t\t\t\t\t\t\tprovider: 'pickMon',\n\t\t\t\t\t\t\t\t\t\t\tid: openBetEvent.source.id,\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\tsport: openBetEvent.sport,\n\t\t\t\t\t\t\t\t\t\toddType: openBetEvent.oddType,\n\t\t\t\t\t\t\t\t\t\tleague: openBetEvent.league,\n\t\t\t\t\t\t\t\t\t\tregion: openBetEvent.region,\n\t\t\t\t\t\t\t\t\t\tdetails: openBetEvent.details,\n\t\t\t\t\t\t\t\t\t\tmatchTime: openBetEvent.matchTime,\n\t\t\t\t\t\t\t\t\t\tteam: openBetEvent.team,\n\t\t\t\t\t\t\t\t\t\tscore:{\n\t\t\t\t\t\t\t\t\t\t\thomeScore: event.line.score.team1 || 0,\n\t\t\t\t\t\t\t\t\t\t\tawayScore: event.line.score.team2 || 0\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\texpireAt: moment().add(3, 'd')\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t \t\t\t\t\tswitch(event.void){\n\t\t\t\t \t\t\t\t\t\tcase '0':\n\t\t\t\t \t\t\t\t\t\t\tnewResult.status = 'Finished'\n\t\t\t\t \t\t\t\t\t\t\tbreak;\n\t\t\t\t \t\t\t\t\t\t// case '1':\n\t\t\t\t \t\t\t\t\t\t// \tnewResult.status = 'Canceled'\n\t\t\t\t \t\t\t\t\t\t// \tnewResult.note = 'pm showed void = 1'\n\t\t\t\t \t\t\t\t\t\t// \tbreak;\n\t\t\t\t \t\t\t\t\t\tdefault:\n\t\t\t\t \t\t\t\t\t\t\tnewResult.status = 'Review'\n\t\t\t\t \t\t\t\t\t\t\tnewResult.note = 'Server Reviewing... TBD, pm void ' + event.void\n\t\t\t\t \t\t\t\t\t\t\treturn\n\t\t\t\t \t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tconst existedResult = await Result.findOne({ uniqueId: openBetEvent.uniqueId })\n\t\t\t\t\t\t\t\t\tif(_.isEmpty(existedResult)){\n\t\t\t\t\t\t\t\t\t\tawait new Result(newResult).save()\n\t\t\t\t\t\t\t\t\t\tconsole.log('saved pickMon new result ' + openBetEvent.uniqueId)\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t \t\t\t\t}\n\t\t\t\t \t\t\t\treturn null\n\n\t\t\t\t \t\t\t}))\n\t\t\t\t \t\t}\n\t\t\t\t \t\treturn null\n\t\t\t\t\t}))\n\t\t\t\t}\n\t\t\t}\n\t\t}else{\n\t\t\tconsole.log('use open bet event id to update pickmon result, but open bet empty')\n\t\t}\n\n\t}\n\n}\n\nexport default fetch_pickMon_result\n\n"]}