{"version":3,"sources":["../../src/updateDB/D1_sync_Result_to_openBet_eventOdds.js"],"names":["sync_Result_with_OpenBet_eventOdds","find","openBets","isEmpty","next","Promise","all","map","openBet","eventOdds","event","findOne","uniqueId","eventResult","console","log","findOneAndUpdate","orderNumber","$elemMatch","singlePickId","score","status","matchTime","format","catch","err"],"mappings":";;;;;;AAAA;;;;AACA;;;;AAEA;;AACA;;;;;;AAEA,IAAMA;AAAA,sDAAqC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAGlB,kBAAQC,IAAR,CAAa,EAAb,CAHkB;;AAAA;AAGnCC,cAHmC;;AAIzC,UAAG,iBAAEC,OAAF,CAAUD,QAAV,CAAH,EAAwBE;AAJiB;AAAA,aAKnCC,QAAQC,GAAR,CAAYJ,SAASK,GAAT;AAAA,6DAAa,kBAAMC,OAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACxBH,QAAQC,GAAR,CAAYE,QAAQC,SAAR,CAAkBF,GAAlB;AAAA,mEAAsB,iBAAMG,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBACb,iBAAOC,OAAP,CAAe,EAAE,YAAYD,MAAME,QAApB,EAAf,CADa;;AAAA;AACjCC,6BADiC;;AAEvC,sBAAGH,MAAME,QAAN,KAAmB,oCAAtB,EAA2D;AAC1DE,2BAAQC,GAAR,CAAYF,WAAZ;AACA;;AAJsC,sBAKnC,iBAAEV,OAAF,CAAUU,WAAV,CALmC;AAAA;AAAA;AAAA;;AAAA;AAAA,yBAMhC,kBAAQG,gBAAR,CAAyB,EAAEC,aAAaT,QAAQS,WAAvB,EAAoCR,WAAW,EAAES,YAAY,EAAEC,cAAcT,MAAMS,YAAtB,EAAd,EAA/C,EAAzB,EACL,EAAE,QAAQ,EAAE,qBAAqBN,YAAYO,KAAnC,EAA0C,sBAAsBP,YAAYQ,MAA5E,EAAV,EADK,CANgC;;AAAA;AAQtCP,0BAAQC,GAAR,CAAY,kCAAZ;AARsC;AAAA;;AAAA;AAUtCD,0BAAQC,GAAR,4CAAoDL,MAAME,QAA1D,SAAsE,sBAAOF,MAAMY,SAAb,EAAwBC,MAAxB,CAA+B,6BAA/B,CAAtE;;AAVsC;AAAA,mDAYhC,IAZgC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAtB;;AAAA;AAAA;AAAA;AAAA,gBAAZ,EAaFC,KAbE,CAaI,eAAO;AAAE,mBAAMC,GAAN;AAAW,aAbxB,CADwB;;AAAA;AAAA,8CAevB,IAfuB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAb;;AAAA;AAAA;AAAA;AAAA,UAAZ,EAgBFD,KAhBE,CAgBI,eAAO;AAAE,aAAMC,GAAN;AAAW,OAhBxB,CALmC;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAArC;;AAAA;AAAA;AAAA;AAAA,GAAN;;kBA6BezB,kC","file":"D1_sync_Result_to_openBet_eventOdds.js","sourcesContent":["import moment from 'moment';\nimport _ from 'lodash';\n\nimport { OpenBet } from '../models/BetOrder';\nimport { Result } from '../models/EventOdd';\n\nconst sync_Result_with_OpenBet_eventOdds = async () => {\n\n\ttry{\n\t\tconst openBets = await OpenBet.find({})\n\t\tif(_.isEmpty(openBets)) next()\n\t\tawait Promise.all(openBets.map(async openBet => {\n\t\t\tawait Promise.all(openBet.eventOdds.map(async event => {\n\t\t\t\tconst eventResult = await Result.findOne({ 'uniqueId': event.uniqueId })\n\t\t\t\tif(event.uniqueId === '1651_1652_BASKETBALL_GAME_09012017'){\n\t\t\t\t\tconsole.log(eventResult)\n\t\t\t\t}\n\t\t\t\tif(!_.isEmpty(eventResult)){\n\t\t\t\t\tawait OpenBet.findOneAndUpdate({ orderNumber: openBet.orderNumber, eventOdds: { $elemMatch: { singlePickId: event.singlePickId }}}, \n\t\t\t\t\t\t{ '$set': { 'eventOdds.$.score': eventResult.score, 'eventOdds.$.status': eventResult.status }})\n\t\t\t\t\tconsole.log('updated openBet with final score')\n\t\t\t\t}else{\n\t\t\t\t\tconsole.log(`result haven't save yet or start yet ${event.uniqueId} ${moment(event.matchTime).format('ddd, MMM DD, YYYY @ hh:mm A')}`)\n\t\t\t\t}\n\t\t\t\treturn null\n\t\t\t})).catch(err => { throw err })\n\t\t\treturn null\n\t\t})).catch(err => { throw err })\n\t\t\t\n\t}catch(err){\n\t\tthrow err\n\t}\n\n}\n\nexport default sync_Result_with_OpenBet_eventOdds\n"]}