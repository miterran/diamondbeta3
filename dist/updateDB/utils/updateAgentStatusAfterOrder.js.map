{"version":3,"sources":["../../../src/updateDB/utils/updateAgentStatusAfterOrder.js"],"names":["updateAgentStatusAfterOrder","AgentId","findOne","_id","Types","ObjectId","agent","find","agentOpenBets","agentHistoryBets","agentCreditSpent","reduce","total","historyBet","resultAmount","existedPlayer","agentCreditPending","openBet","wagerDetail","riskAmount","activePlayerCounter","uniqBy","concat","apply","map","owner","player","toString","agentCurrentStatus","length","activePlayer","credit","creditPending","availableCredit","findOneAndUpdate","currentStatus","new","then","console","log","result"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;;;;;AACA;AACA,IAAMA;AAAA,sDAA8B,iBAAOC,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAGd,gBAAMC,OAAN,CAAc,EAAEC,KAAK,mBAASC,KAAT,CAAeC,QAAf,CAAwBJ,OAAxB,CAAP,EAAd,EAAwD,eAAxD,CAHc;;AAAA;AAG5BK,WAH4B;AAAA;AAAA,aAKN,kBAAQC,IAAR,CAAa,EAAE,eAAe,mBAASH,KAAT,CAAeC,QAAf,CAAwBJ,OAAxB,CAAjB,EAAb,EAAkE,qEAAlE,CALM;;AAAA;AAK5BO,mBAL4B;AAAA;AAAA,aAOH,qBAAWD,IAAX,CAAgB,EAAE,eAAe,mBAASH,KAAT,CAAeC,QAAf,CAAwBJ,OAAxB,CAAjB,EAAmD,UAAU,MAA7D,EAAhB,EAAuF,cAAvF,CAPG;;AAAA;AAO5BQ,sBAP4B;AAS5BC,sBAT4B,GASTD,iBAAiBE,MAAjB,CAAwB,UAACC,KAAD,EAAQC,UAAR;AAAA,cAAuBD,QAAQC,WAAWC,YAA1C;AAAA,OAAxB,EAAgF,CAAhF,CATS;AAAA;AAAA,aAWN,iBAAOP,IAAP,CAAY,EAAED,OAAO,mBAASF,KAAT,CAAeC,QAAf,CAAwBJ,OAAxB,CAAT,EAAZ,EAAyD,KAAzD,CAXM;;AAAA;AAW5Bc,mBAX4B;AAa5BC,wBAb4B,GAaPR,cAAcG,MAAd,CAAqB,UAACC,KAAD,EAAQK,OAAR;AAAA,cAAoBL,QAAQK,QAAQC,WAAR,CAAoBC,UAAhD;AAAA,OAArB,EAAiF,CAAjF,CAbO;AAe5BC,yBAf4B,GAeN,iBAAEC,MAAF,CAAS,GAAGC,MAAH,CAAUC,KAAV,CAAgB,EAAhB,EAAoBf,cAAcgB,GAAd,CAAkB;AAAA,cAAWP,QAAQQ,KAAR,CAAcC,MAAd,CAAqBC,QAArB,EAAX;AAAA,OAAlB,CAApB,CAAT,CAfM;AAiB5BC,wBAjB4B,GAiBP;AAC1Bb,sBAAeA,cAAcc,MADH;AAE1BC,qBAAcV,oBAAoBS,MAFR;AAG1BE,eAAQ,SAASrB,gBAHS;AAI1BsB,sBAAehB,kBAJW;AAK1BiB,wBAAiB,UAAWvB,mBAAmBM,kBAA9B;AALS,OAjBO;AAAA;AAAA,aAyB5B,gBAAMkB,gBAAN,CAAuB,EAAE/B,KAAK,mBAASC,KAAT,CAAeC,QAAf,CAAwBJ,OAAxB,CAAP,EAAvB,EAAkE,EAAC,QAAQ,EAAEkC,eAAeP,kBAAjB,EAAT,EAAlE,EAAmH,EAACQ,KAAK,IAAN,EAAnH,EAAgIC,IAAhI,CAAqI,kBAAU;AACpJC,eAAQC,GAAR,CAAYC,MAAZ;AACA,OAFK,CAzB4B;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAA9B;;AAAA;AAAA;AAAA;AAAA,GAAN;;kBA2DexC,2B","file":"updateAgentStatusAfterOrder.js","sourcesContent":["import Agent from '../../models/Agent';\nimport Player from '../../models/Player'\nimport { OpenBet, HistoryBet } from '../../models/BetOrder';\nimport moment from 'moment'\nimport mongoose from 'mongoose'\nimport _ from 'lodash'\n// update agent current status every time order changed\nconst updateAgentStatusAfterOrder = async (AgentId) => {\n\n\ttry {\n\t\tconst agent = await Agent.findOne({ _id: mongoose.Types.ObjectId(AgentId)}, 'currentStatus')\n\n\t\tconst agentOpenBets = await OpenBet.find({ 'owner.agent': mongoose.Types.ObjectId(AgentId) }, 'orderType wagerDetail.riskAmount wagerDetail.winAmount owner.player')\n\n\t\tconst agentHistoryBets = await HistoryBet.find({ 'owner.agent': mongoose.Types.ObjectId(AgentId), 'status': 'Lost' }, 'resultAmount')\n\t\t\n\t\tconst agentCreditSpent = agentHistoryBets.reduce((total, historyBet) => total + historyBet.resultAmount, 0)\n\n\t\tconst existedPlayer = await Player.find({ agent: mongoose.Types.ObjectId(AgentId) }, '_id')\n\n\t\tconst agentCreditPending = agentOpenBets.reduce((total, openBet) => total + openBet.wagerDetail.riskAmount, 0)\n\n\t\tconst activePlayerCounter = _.uniqBy([].concat.apply([], agentOpenBets.map(openBet => openBet.owner.player.toString())))\n\n\t\tconst agentCurrentStatus = {\n\t\t\texistedPlayer: existedPlayer.length,\n\t\t\tactivePlayer: activePlayerCounter.length,\n\t\t\tcredit: 100000 + agentCreditSpent,\n\t\t\tcreditPending: agentCreditPending,\n\t\t\tavailableCredit: 100000 + ( agentCreditSpent - agentCreditPending )\n\t\t}\n\t\t\n\t\tawait Agent.findOneAndUpdate({ _id: mongoose.Types.ObjectId(AgentId) }, {'$set': { currentStatus: agentCurrentStatus }}, {new: true}).then(result => {\n\t\t\tconsole.log(result)\n\t\t})\n\n\n\t\t// const players = await Player.find({ agent: mongoose.Types.ObjectId(AgentId) }, '_id')\n\t\t// const agent = await Agent.findOne({ _id:  mongoose.Types.ObjectId(AgentId) })\n\t\t// const playerIds = players.map(player => mongoose.Types.ObjectId(player._id))\n\n\n\n\t\t// await Promise.all(playerIds.map(async player => {\n\t\t// \tconsole.log(player)\n\t\t// \t// agent.players.push(player)\n\t\t// \t// await agent.save()\n\t\t// }))\n\n\t\t// console.log(playerIds)\n\t\t// agent.players.push(playerIds)\n\t\t// await agent.save()\n\n// \t\tawait Promise.all(players.map(async player => {\n// //\t\t\tif(!agent.player.includes(player)){\n// \t\t\t\tagent.players.push(player)\n// \t\t\t\tawait agent.save()\n// //\t\t\t}\n// \t\t\treturn null\n// \t\t}))\n\t\t\n\t}catch(err){\n\t\tthrow err\n\t}\n}\n\nexport default updateAgentStatusAfterOrder\n\n"]}