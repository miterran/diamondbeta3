{"version":3,"sources":["../../src/updateDB/C1_fetch_jsonOdd_result.js"],"names":["axiosJsonOdd","create","headers","jsonOddApiKey","fetch_jsonOdd_result","find","openBets","isEmpty","next","openBetJsonOddEvents","compact","uniqBy","concat","apply","map","openBet","eventOdds","event","status","source","provider","pick","Promise","all","get","id","oddType","response","oddResult","data","length","Object","assign","replace","response2","console","log","Final","FinalType","resultStatus","note","newResult","eventResultId","eventOddId","sport","league","region","details","matchTime","team","score","homeScore","HomeScore","awayScore","AwayScore","expireAt","add","findOne","existedResult","save"],"mappings":"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","file":"C1_fetch_jsonOdd_result.js","sourcesContent":["import config from '../config';\nimport { OpenBet } from '../models/BetOrder';\nimport { Result } from '../models/EventOdd'\nimport moment from 'moment'\nimport _ from 'lodash'\n\nimport axios from 'axios'\nconst axiosJsonOdd = axios.create({ headers: {'JsonOdds-API-Key': config.jsonOddApiKey}})\n\nconst fetch_jsonOdd_result = async () => {\n\n\ttry{\n\t\tconst openBets = await OpenBet.find({})\n\t\tif(_.isEmpty(openBets)) next()\n\n\t\tconst openBetJsonOddEvents = _.compact(_.uniqBy([].concat.apply([], openBets.map(openBet => {\n\t\t\treturn openBet.eventOdds.map(event => {\n\t\t\t\tif(event.status === 'Pending' && event.source.provider === 'jsonOdd' ){\n\t\t\t\t\treturn _.pick(event, ['eventOddId', 'sport', 'matchTime', 'details', 'league', 'region', 'status', 'team', 'source', 'oddType'])\n\t\t\t\t}\n\t\t\t\treturn null\n\t\t\t})\n\t\t})), 'eventOddId'))\n\n\t\t// eventOddId = generate array unique source id and oddtype from all json open bet\n\n\t\tif(!_.isEmpty(openBetJsonOddEvents)){\n\t\t\tawait Promise.all(openBetJsonOddEvents.map(async event => {\n\t\t\t\tconst response = await axiosJsonOdd.get(`https://jsonodds.com/api/results/getbyeventid/${event.source.id}?oddtype=${event.oddType}`)\n\t\t\t\tlet oddResult = {}\n\t\t\t\tif(response.data.length > 0 && response.data.length === 1){\n\t\t\t\t\toddResult = Object.assign({}, response.data[0])\n\t\t\t\t}else if(response.data.length > 1){\n\t\t\t\t\tconst response2 = await axiosJsonOdd.get(`https://jsonodds.com/api/results/getbyeventid/${event.source.id}?oddtype=${event.oddType.replace(/\\s/g,'')}`)\n\t\t\t\t\tif(response2.data.length > 0 && response2.data.length === 1){\n\t\t\t\t\t\toddResult = Object.assign({}, response2.data[0])\n\t\t\t\t\t}\n\t\t\t\t}else if(_.isEmpty(response.data)){\n\t\t\t\t\tconsole.log(`error error error error error jsonOdd cannot get result from openbet event, response empty ${event.source.id} ${event.oddType}`)\n\t\t\t\t}\n\n\t\t\t\tif(!_.isEmpty(oddResult) && oddResult.Final && oddResult.FinalType !== 'NotFinished'){\n\t\t\t\t\tlet resultStatus = ''\n\t\t\t\t\tlet note = ''\n\t\t\t\t\tswitch(oddResult.FinalType){\n\t\t\t\t\t\tcase 'Finished':\n\t\t\t\t\t\t\tresultStatus = 'Finished'\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'Canceled':\n\t\t\t\t\t\t\tresultStatus = 'Canceled'\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'Postponed':\n\t\t\t\t\t\t\tresultStatus = 'Postponed'\n\t\t\t\t\t\t\tnote = 'Postponed = Canceled'\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tresultStatus = 'Review'\n\t\t\t\t\t\t\tnote = 'Server Reviewing... TBD'\n\t\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\n\t\t\t\t\tconst newResult = {\n\t\t\t\t\t\teventResultId: event.eventOddId,\n\t\t\t\t\t\tsource: {\n\t\t\t\t\t\t\tprovider: 'jsonOdd',\n\t\t\t\t\t\t\tid: event.source.id,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tsport: event.sport,\n\t\t\t\t\t\toddType: event.oddType,\n\t\t\t\t\t\tleague: event.league,\n\t\t\t\t\t\tregion: event.region,\n\t\t\t\t\t\tdetails: event.details,\n\t\t\t\t\t\tmatchTime: event.matchTime,\n\t\t\t\t\t\tteam: event.team,\n\t\t\t\t\t\tscore:{\n\t\t\t\t\t\t\thomeScore: oddResult.HomeScore || 0,\n\t\t\t\t\t\t\tawayScore: oddResult.AwayScore || 0\n\t\t\t\t\t\t},\n\t\t\t\t\t\tstatus: resultStatus,\n\t\t\t\t\t\tnote: note,\n\t\t\t\t\t\texpireAt: moment().add(3, 'd')\n\t\t\t\t\t}\n\n\t\t\t\t\tconst existedResult = await Result.findOne({ eventResultId: event.eventOddId })\n\t\t\t\t\tif(_.isEmpty(existedResult)){\n\t\t\t\t\t\tawait new Result(newResult).save()\n\t\t\t\t\t\tconsole.log('saved jsonOdd new result')\n\t\t\t\t\t}\n\n\t\t\t\t}else{\n\t\t\t\t\tconsole.log(`json odd event ${event.eventOddId} not finish yet, skip save result`)\n\t\t\t\t}\n\t\t\n\t\t\t\treturn null\n\t\t\t}))\n\t\t\n\t\t}else{\n\t\t\tconsole.log('use open bet event id to update json odd result, but open bet empty')\n\t\t}\n\t}catch(err){\n\t\tthrow err\n\t}\n\n}\n\nexport default fetch_jsonOdd_result\n"]}