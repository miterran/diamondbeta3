{"version":3,"sources":["../src/config.js"],"names":["require","config","envVarsSchema","object","NODE_ENV","string","allow","default","PORT","number","MONGOOSE_DEBUG","boolean","when","is","equal","then","otherwise","JWT_SECRET","required","description","MONGO_URL","JSONODD_API_KEY","PICKMON_UID","PICKMON_KEY","unknown","validate","process","env","error","envVars","value","Error","message","port","mongooseDebug","jwtSecret","mongoURL","jsonOddApiKey","pickMon_UID","pickMon_Key"],"mappings":";;;;;;AAAA;;;;;;AAEA;AACAA,QAAQ,QAAR,EAAkBC,MAAlB;;AAEA;AACA,IAAMC,gBAAgB,cAAIC,MAAJ,CAAW;AAChCC,WAAU,cAAIC,MAAJ,GAAaC,KAAb,CAAmB,CAAC,aAAD,EAAgB,YAAhB,EAA8B,MAA9B,EAAsC,WAAtC,CAAnB,EAAuEC,OAAvE,CAA+E,aAA/E,CADsB;AAEhCC,OAAM,cAAIC,MAAJ,GAAaF,OAAb,CAAqB,IAArB,CAF0B;AAGhCG,iBAAgB,cAAIC,OAAJ,GAAcC,IAAd,CAAmB,UAAnB,EAA+B;AAC9CC,MAAI,cAAIR,MAAJ,GAAaS,KAAb,CAAmB,aAAnB,CAD0C;AAE9CC,QAAM,cAAIJ,OAAJ,GAAcJ,OAAd,CAAsB,IAAtB,CAFwC;AAG9CS,aAAW,cAAIL,OAAJ,GAAcJ,OAAd,CAAsB,KAAtB;AAHmC,EAA/B,CAHgB;AAQhCU,aAAY,cAAIZ,MAAJ,GAAaa,QAAb,GAAwBC,WAAxB,CAAoC,6BAApC,CARoB;AAShCC,YAAW,cAAIf,MAAJ,GAAaa,QAAb,GAAwBC,WAAxB,CAAoC,mBAApC,CATqB;AAUhCE,kBAAiB,cAAIhB,MAAJ,GAAaa,QAAb,GAAwBC,WAAxB,CAAoC,kBAApC,CAVe;AAWhCG,cAAa,cAAIjB,MAAJ,GAAaa,QAAb,GAAwBC,WAAxB,CAAoC,aAApC,CAXmB;AAYhCI,cAAa,cAAIlB,MAAJ,GAAaa,QAAb,GAAwBC,WAAxB,CAAoC,aAApC;AAZmB,CAAX,EAanBK,OAbmB,GAcpBN,QAdoB,EAAtB;;oBAgBkC,cAAIO,QAAJ,CAAaC,QAAQC,GAArB,EAA0BzB,aAA1B,C;IAA1B0B,K,iBAAAA,K;IAAcC,O,iBAAPC,K;;AACf,IAAIF,KAAJ,EAAW;AACV,OAAM,IAAIG,KAAJ,+BAAsCH,MAAMI,OAA5C,CAAN;AACA;;AAED,IAAM/B,SAAS;AACd0B,MAAKE,QAAQzB,QADC;AAEd6B,OAAMJ,QAAQrB,IAFA;AAGd0B,gBAAeL,QAAQnB,cAHT;AAIdyB,YAAWN,QAAQZ,UAJL;AAKdmB,WAAUP,QAAQT,SALJ;AAMdiB,gBAAeR,QAAQR,eANT;AAOdiB,cAAaT,QAAQP,WAPP;AAQdiB,cAAaV,QAAQN;AARP,CAAf;;kBAWetB,M","file":"config.js","sourcesContent":["import Joi from 'joi'\n\n// require and configure dotenv, will load vars in .env in PROCESS.ENV\nrequire('dotenv').config()\n\n// define validation for all the env vars\nconst envVarsSchema = Joi.object({\n\tNODE_ENV: Joi.string().allow(['development', 'production', 'test', 'provision']).default('development'),\n\tPORT: Joi.number().default(8080),\n\tMONGOOSE_DEBUG: Joi.boolean().when('NODE_ENV', {\n\t\tis: Joi.string().equal('development'),\n\t\tthen: Joi.boolean().default(true),\n\t\totherwise: Joi.boolean().default(false)\n\t}),\n\tJWT_SECRET: Joi.string().required().description('JWT Secret required to sign'),\n\tMONGO_URL: Joi.string().required().description('Mongo DB host url'),\n\tJSONODD_API_KEY: Joi.string().required().description('JSON ODD API KEY'),\n\tPICKMON_UID: Joi.string().required().description('PICKMON UID'),\n\tPICKMON_KEY: Joi.string().required().description('PICKMON KEY')\n}).unknown()\n\t.required()\n\nconst { error, value: envVars } = Joi.validate(process.env, envVarsSchema)\nif (error) {\n\tthrow new Error(`Config validation error: ${error.message}`)\n}\n\nconst config = {\n\tenv: envVars.NODE_ENV,\n\tport: envVars.PORT,\n\tmongooseDebug: envVars.MONGOOSE_DEBUG,\n\tjwtSecret: envVars.JWT_SECRET,\n\tmongoURL: envVars.MONGO_URL,\n\tjsonOddApiKey: envVars.JSONODD_API_KEY,\n\tpickMon_UID: envVars.PICKMON_UID,\n\tpickMon_Key: envVars.PICKMON_KEY\n}\n\nexport default config\n"]}