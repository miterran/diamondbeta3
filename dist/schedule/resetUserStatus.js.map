{"version":3,"sources":["../../src/schedule/resetUserStatus.js"],"names":["resetUserStatus","findOne","usage","cooldown","format","updatedAt","sec","findOneAndUpdate","$set","cooldownTimer","isoWeek","find","players","Promise","all","map","player","_id","agents","agent","console","log"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAGA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;AAEA,IAAMA;AAAA,sDAAkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAKC,mBAASC,OAAT,CAAiB,EAAEC,OAAO,oBAAT,EAAjB,CALD;;AAAA;AAKhBC,cALgB;;AAAA,YAMnB,wBAASC,MAAT,CAAgB,GAAhB,IAAuB,sBAAOD,SAASE,SAAhB,EAA2BD,MAA3B,CAAkC,GAAlC,CAAvB,GAAgED,SAASG,GANtD;AAAA;AAAA;AAAA;;AAAA;AAAA,aAOf,mBAASC,gBAAT,CAA0B,EAAEL,OAAO,oBAAT,EAA1B,EAA2D,EAAEM,MAAM,EAAEH,WAAW,uBAAb,EAAR,EAA3D,CAPe;;AAAA;AAAA;AAAA,aAQf,wCARe;;AAAA;AAAA;AAAA,aASf,wCATe;;AAAA;AAAA;AAAA,aAUf,oDAVe;;AAAA;AAAA;AAAA,aAWf,sDAXe;;AAAA;AAAA;AAAA,aAYf,wDAZe;;AAAA;AAAA;AAAA,aAeM,mBAASJ,OAAT,CAAiB,EAAEC,OAAO,iBAAT,EAAjB,EAA+C,KAA/C,CAfN;;AAAA;AAehBO,mBAfgB;;AAAA,YAgBnBA,cAAcH,GAAd,KAAsB,wBAASI,OAAT,EAhBH;AAAA;AAAA;AAAA;;AAAA;AAAA,aAiBC,iBAAOC,IAAP,CAAY,EAAZ,EAAgB,KAAhB,CAjBD;;AAAA;AAiBfC,aAjBe;AAAA;AAAA,aAkBfC,QAAQC,GAAR,CAAYF,QAAQG,GAAR;AAAA,6DAAY,iBAAMC,MAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACvB,4CAA6BA,OAAOC,GAApC,CADuB;;AAAA;AAAA,6CAEtB,IAFsB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAZ;;AAAA;AAAA;AAAA;AAAA,UAAZ,CAlBe;;AAAA;AAAA;AAAA,aAuBA,gBAAMN,IAAN,CAAW,EAAX,EAAe,KAAf,CAvBA;;AAAA;AAuBfO,YAvBe;AAAA;AAAA,aAwBfL,QAAQC,GAAR,CAAYI,OAAOH,GAAP;AAAA,6DAAW,kBAAMI,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACtB,kDAAmCA,MAAMF,GAAzC,CADsB;;AAAA;AAAA,8CAErB,IAFqB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAX;;AAAA;AAAA;AAAA;AAAA,UAAZ,CAxBe;;AAAA;AAAA;AAAA,aA6Bf,mBAASV,gBAAT,CAA0B,EAAEL,OAAO,iBAAT,EAA1B,EAAwD,EAAEM,MAAM,EAAEF,KAAK,wBAASI,OAAT,EAAP,EAAR,EAAxD,CA7Be;;AAAA;AA8BrBU,cAAQC,GAAR,CAAY,cAAZ;;AA9BqB;AAAA;;AAAA;AAiCrBD,cAAQC,GAAR,CAAY,kBAAZ;;AAjCqB;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAlB;;AAAA;AAAA;AAAA;AAAA,GAAN;;kBA0CerB,e","file":"resetUserStatus.js","sourcesContent":["import updateAgentOpenBetStatusAfterOrder from '../updateDB/updateUser/updateAgentOpenBetStatusAfterOrder'\nimport updatePlayerStatusAfterOrder from '../updateDB/updateUser/updatePlayerStatusAfterOrder'\nimport Player from '../models/Player'\nimport Agent from '../models/Agent'\nimport CoolDown from '../models/CoolDown'\nimport moment from 'moment'\n\n\nimport C1_fetch_jsonOdd_result from '../updateDB/C1_fetch_jsonOdd_result';\nimport C2_fetch_pickMon_result from '../updateDB/C2_fetch_pickMon_result';\nimport D1_sync_Result_to_openBet_eventOdds from '../updateDB/D1_sync_Result_to_openBet_eventOdds';\nimport E1_determine_OpenBet_eventOdds_result from '../updateDB/E1_determine_OpenBet_eventOdds_result';\nimport F1_confirm_openBet_result_to_HistoryBet from '../updateDB/F1_confirm_openBet_result_to_HistoryBet';\n\nconst resetUserStatus = async () => {\n\t\n\ttry{\n\n\n\t\tconst cooldown = await CoolDown.findOne({ usage: 'fullResultUpdateDB' })\n\t\tif(moment().format('X') - moment(cooldown.updatedAt).format('X') > cooldown.sec){\n\t\t\tawait CoolDown.findOneAndUpdate({ usage: 'fullResultUpdateDB' }, { $set: { updatedAt: moment() } })\n\t\t\tawait C1_fetch_jsonOdd_result()\n\t\t\tawait C2_fetch_pickMon_result()\n\t\t\tawait D1_sync_Result_to_openBet_eventOdds()\n\t\t\tawait E1_determine_OpenBet_eventOdds_result()\n\t\t\tawait F1_confirm_openBet_result_to_HistoryBet()\n\t\t}\n\t\t\n\t\tconst cooldownTimer = await CoolDown.findOne({ usage: 'resetUserStatus' }, 'sec')\n\t\tif(cooldownTimer.sec !== moment().isoWeek()){\n\t\t\tconst players = await Player.find({}, '_id')\n\t\t\tawait Promise.all(players.map(async player => {\n\t\t\t\tawait updatePlayerStatusAfterOrder(player._id)\n\t\t\t\treturn null\n\t\t\t}))\n\n\t\t\tconst agents = await Agent.find({}, '_id')\n\t\t\tawait Promise.all(agents.map(async agent => {\n\t\t\t\tawait updateAgentOpenBetStatusAfterOrder(agent._id)\n\t\t\t\treturn null\n\t\t\t}))\n\n\t\t\tawait CoolDown.findOneAndUpdate({ usage: 'resetUserStatus' }, { $set: { sec: moment().isoWeek() } })\n\t\t\tconsole.log('auto updated')\n\n\t\t}else{\n\t\t\tconsole.log('skip auto update')\n\t\t}\n\n\t}catch(err){\n\t\tthrow err\n\t}\n\n}\n\nexport default resetUserStatus"]}